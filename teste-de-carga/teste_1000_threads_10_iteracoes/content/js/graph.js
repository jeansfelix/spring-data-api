/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 88.0, "minX": 0.0, "maxY": 20684.0, "series": [{"data": [[0.0, 88.0], [0.1, 125.0], [0.2, 203.0], [0.3, 253.0], [0.4, 310.0], [0.5, 379.0], [0.6, 446.0], [0.7, 520.0], [0.8, 586.0], [0.9, 664.0], [1.0, 717.0], [1.1, 785.0], [1.2, 852.0], [1.3, 911.0], [1.4, 945.0], [1.5, 1047.0], [1.6, 1083.0], [1.7, 1176.0], [1.8, 1247.0], [1.9, 1281.0], [2.0, 1331.0], [2.1, 1376.0], [2.2, 1448.0], [2.3, 1533.0], [2.4, 1598.0], [2.5, 1642.0], [2.6, 1725.0], [2.7, 1789.0], [2.8, 1818.0], [2.9, 1868.0], [3.0, 1906.0], [3.1, 1952.0], [3.2, 2004.0], [3.3, 2095.0], [3.4, 2123.0], [3.5, 2177.0], [3.6, 2234.0], [3.7, 2265.0], [3.8, 2304.0], [3.9, 2389.0], [4.0, 2445.0], [4.1, 2504.0], [4.2, 2547.0], [4.3, 2587.0], [4.4, 2638.0], [4.5, 2677.0], [4.6, 2724.0], [4.7, 2761.0], [4.8, 2810.0], [4.9, 2892.0], [5.0, 2937.0], [5.1, 2999.0], [5.2, 3040.0], [5.3, 3070.0], [5.4, 3108.0], [5.5, 3142.0], [5.6, 3170.0], [5.7, 3205.0], [5.8, 3230.0], [5.9, 3268.0], [6.0, 3323.0], [6.1, 3352.0], [6.2, 3383.0], [6.3, 3437.0], [6.4, 3474.0], [6.5, 3495.0], [6.6, 3531.0], [6.7, 3551.0], [6.8, 3603.0], [6.9, 3641.0], [7.0, 3662.0], [7.1, 3700.0], [7.2, 3748.0], [7.3, 3767.0], [7.4, 3811.0], [7.5, 3851.0], [7.6, 3872.0], [7.7, 3901.0], [7.8, 3944.0], [7.9, 3974.0], [8.0, 4002.0], [8.1, 4071.0], [8.2, 4099.0], [8.3, 4146.0], [8.4, 4197.0], [8.5, 4232.0], [8.6, 4256.0], [8.7, 4303.0], [8.8, 4346.0], [8.9, 4372.0], [9.0, 4411.0], [9.1, 4434.0], [9.2, 4455.0], [9.3, 4493.0], [9.4, 4524.0], [9.5, 4554.0], [9.6, 4589.0], [9.7, 4637.0], [9.8, 4674.0], [9.9, 4708.0], [10.0, 4750.0], [10.1, 4784.0], [10.2, 4801.0], [10.3, 4841.0], [10.4, 4865.0], [10.5, 4897.0], [10.6, 4920.0], [10.7, 4970.0], [10.8, 5007.0], [10.9, 5047.0], [11.0, 5072.0], [11.1, 5097.0], [11.2, 5126.0], [11.3, 5158.0], [11.4, 5181.0], [11.5, 5198.0], [11.6, 5217.0], [11.7, 5242.0], [11.8, 5263.0], [11.9, 5287.0], [12.0, 5325.0], [12.1, 5345.0], [12.2, 5364.0], [12.3, 5407.0], [12.4, 5433.0], [12.5, 5454.0], [12.6, 5484.0], [12.7, 5524.0], [12.8, 5561.0], [12.9, 5577.0], [13.0, 5627.0], [13.1, 5657.0], [13.2, 5677.0], [13.3, 5713.0], [13.4, 5732.0], [13.5, 5776.0], [13.6, 5803.0], [13.7, 5831.0], [13.8, 5864.0], [13.9, 5893.0], [14.0, 5925.0], [14.1, 5952.0], [14.2, 5997.0], [14.3, 6016.0], [14.4, 6028.0], [14.5, 6072.0], [14.6, 6120.0], [14.7, 6153.0], [14.8, 6179.0], [14.9, 6200.0], [15.0, 6225.0], [15.1, 6253.0], [15.2, 6273.0], [15.3, 6299.0], [15.4, 6322.0], [15.5, 6340.0], [15.6, 6354.0], [15.7, 6368.0], [15.8, 6391.0], [15.9, 6418.0], [16.0, 6446.0], [16.1, 6465.0], [16.2, 6483.0], [16.3, 6505.0], [16.4, 6520.0], [16.5, 6541.0], [16.6, 6567.0], [16.7, 6587.0], [16.8, 6612.0], [16.9, 6632.0], [17.0, 6650.0], [17.1, 6668.0], [17.2, 6695.0], [17.3, 6719.0], [17.4, 6730.0], [17.5, 6750.0], [17.6, 6765.0], [17.7, 6790.0], [17.8, 6808.0], [17.9, 6834.0], [18.0, 6854.0], [18.1, 6876.0], [18.2, 6895.0], [18.3, 6922.0], [18.4, 6952.0], [18.5, 6979.0], [18.6, 7017.0], [18.7, 7046.0], [18.8, 7055.0], [18.9, 7076.0], [19.0, 7093.0], [19.1, 7104.0], [19.2, 7121.0], [19.3, 7154.0], [19.4, 7196.0], [19.5, 7226.0], [19.6, 7240.0], [19.7, 7282.0], [19.8, 7312.0], [19.9, 7339.0], [20.0, 7352.0], [20.1, 7374.0], [20.2, 7395.0], [20.3, 7409.0], [20.4, 7419.0], [20.5, 7433.0], [20.6, 7451.0], [20.7, 7471.0], [20.8, 7491.0], [20.9, 7510.0], [21.0, 7531.0], [21.1, 7565.0], [21.2, 7578.0], [21.3, 7599.0], [21.4, 7617.0], [21.5, 7651.0], [21.6, 7662.0], [21.7, 7683.0], [21.8, 7693.0], [21.9, 7713.0], [22.0, 7728.0], [22.1, 7745.0], [22.2, 7772.0], [22.3, 7799.0], [22.4, 7814.0], [22.5, 7835.0], [22.6, 7873.0], [22.7, 7897.0], [22.8, 7909.0], [22.9, 7918.0], [23.0, 7942.0], [23.1, 7971.0], [23.2, 7988.0], [23.3, 8008.0], [23.4, 8028.0], [23.5, 8044.0], [23.6, 8061.0], [23.7, 8089.0], [23.8, 8115.0], [23.9, 8133.0], [24.0, 8148.0], [24.1, 8157.0], [24.2, 8186.0], [24.3, 8203.0], [24.4, 8218.0], [24.5, 8246.0], [24.6, 8279.0], [24.7, 8301.0], [24.8, 8333.0], [24.9, 8353.0], [25.0, 8368.0], [25.1, 8387.0], [25.2, 8414.0], [25.3, 8425.0], [25.4, 8439.0], [25.5, 8471.0], [25.6, 8491.0], [25.7, 8521.0], [25.8, 8536.0], [25.9, 8552.0], [26.0, 8573.0], [26.1, 8595.0], [26.2, 8610.0], [26.3, 8622.0], [26.4, 8638.0], [26.5, 8656.0], [26.6, 8688.0], [26.7, 8711.0], [26.8, 8723.0], [26.9, 8741.0], [27.0, 8762.0], [27.1, 8776.0], [27.2, 8799.0], [27.3, 8813.0], [27.4, 8839.0], [27.5, 8853.0], [27.6, 8868.0], [27.7, 8879.0], [27.8, 8897.0], [27.9, 8919.0], [28.0, 8935.0], [28.1, 8961.0], [28.2, 8990.0], [28.3, 9005.0], [28.4, 9030.0], [28.5, 9045.0], [28.6, 9065.0], [28.7, 9086.0], [28.8, 9101.0], [28.9, 9128.0], [29.0, 9148.0], [29.1, 9168.0], [29.2, 9176.0], [29.3, 9187.0], [29.4, 9196.0], [29.5, 9227.0], [29.6, 9247.0], [29.7, 9286.0], [29.8, 9315.0], [29.9, 9324.0], [30.0, 9342.0], [30.1, 9351.0], [30.2, 9365.0], [30.3, 9385.0], [30.4, 9407.0], [30.5, 9415.0], [30.6, 9428.0], [30.7, 9443.0], [30.8, 9462.0], [30.9, 9483.0], [31.0, 9514.0], [31.1, 9533.0], [31.2, 9544.0], [31.3, 9564.0], [31.4, 9585.0], [31.5, 9598.0], [31.6, 9622.0], [31.7, 9651.0], [31.8, 9666.0], [31.9, 9685.0], [32.0, 9710.0], [32.1, 9726.0], [32.2, 9735.0], [32.3, 9749.0], [32.4, 9769.0], [32.5, 9781.0], [32.6, 9808.0], [32.7, 9821.0], [32.8, 9835.0], [32.9, 9869.0], [33.0, 9910.0], [33.1, 9923.0], [33.2, 9941.0], [33.3, 9964.0], [33.4, 9989.0], [33.5, 10006.0], [33.6, 10029.0], [33.7, 10039.0], [33.8, 10055.0], [33.9, 10076.0], [34.0, 10098.0], [34.1, 10115.0], [34.2, 10134.0], [34.3, 10154.0], [34.4, 10165.0], [34.5, 10187.0], [34.6, 10206.0], [34.7, 10222.0], [34.8, 10232.0], [34.9, 10256.0], [35.0, 10265.0], [35.1, 10278.0], [35.2, 10301.0], [35.3, 10324.0], [35.4, 10335.0], [35.5, 10351.0], [35.6, 10363.0], [35.7, 10376.0], [35.8, 10400.0], [35.9, 10424.0], [36.0, 10445.0], [36.1, 10454.0], [36.2, 10463.0], [36.3, 10472.0], [36.4, 10490.0], [36.5, 10511.0], [36.6, 10533.0], [36.7, 10557.0], [36.8, 10571.0], [36.9, 10585.0], [37.0, 10602.0], [37.1, 10626.0], [37.2, 10648.0], [37.3, 10658.0], [37.4, 10669.0], [37.5, 10686.0], [37.6, 10700.0], [37.7, 10710.0], [37.8, 10732.0], [37.9, 10755.0], [38.0, 10760.0], [38.1, 10772.0], [38.2, 10783.0], [38.3, 10789.0], [38.4, 10807.0], [38.5, 10816.0], [38.6, 10846.0], [38.7, 10862.0], [38.8, 10871.0], [38.9, 10888.0], [39.0, 10899.0], [39.1, 10913.0], [39.2, 10923.0], [39.3, 10943.0], [39.4, 10959.0], [39.5, 10968.0], [39.6, 10982.0], [39.7, 10988.0], [39.8, 10999.0], [39.9, 11009.0], [40.0, 11019.0], [40.1, 11029.0], [40.2, 11045.0], [40.3, 11070.0], [40.4, 11080.0], [40.5, 11094.0], [40.6, 11101.0], [40.7, 11117.0], [40.8, 11133.0], [40.9, 11148.0], [41.0, 11162.0], [41.1, 11176.0], [41.2, 11186.0], [41.3, 11196.0], [41.4, 11205.0], [41.5, 11212.0], [41.6, 11218.0], [41.7, 11230.0], [41.8, 11246.0], [41.9, 11265.0], [42.0, 11288.0], [42.1, 11302.0], [42.2, 11313.0], [42.3, 11325.0], [42.4, 11340.0], [42.5, 11352.0], [42.6, 11363.0], [42.7, 11372.0], [42.8, 11382.0], [42.9, 11401.0], [43.0, 11410.0], [43.1, 11415.0], [43.2, 11421.0], [43.3, 11438.0], [43.4, 11448.0], [43.5, 11460.0], [43.6, 11470.0], [43.7, 11480.0], [43.8, 11487.0], [43.9, 11496.0], [44.0, 11505.0], [44.1, 11524.0], [44.2, 11530.0], [44.3, 11539.0], [44.4, 11547.0], [44.5, 11561.0], [44.6, 11573.0], [44.7, 11587.0], [44.8, 11603.0], [44.9, 11611.0], [45.0, 11627.0], [45.1, 11638.0], [45.2, 11650.0], [45.3, 11659.0], [45.4, 11674.0], [45.5, 11685.0], [45.6, 11700.0], [45.7, 11712.0], [45.8, 11731.0], [45.9, 11739.0], [46.0, 11753.0], [46.1, 11762.0], [46.2, 11772.0], [46.3, 11789.0], [46.4, 11805.0], [46.5, 11815.0], [46.6, 11832.0], [46.7, 11841.0], [46.8, 11859.0], [46.9, 11871.0], [47.0, 11885.0], [47.1, 11896.0], [47.2, 11907.0], [47.3, 11924.0], [47.4, 11938.0], [47.5, 11956.0], [47.6, 11970.0], [47.7, 11988.0], [47.8, 11997.0], [47.9, 12010.0], [48.0, 12025.0], [48.1, 12031.0], [48.2, 12044.0], [48.3, 12061.0], [48.4, 12084.0], [48.5, 12104.0], [48.6, 12115.0], [48.7, 12133.0], [48.8, 12150.0], [48.9, 12161.0], [49.0, 12176.0], [49.1, 12194.0], [49.2, 12202.0], [49.3, 12217.0], [49.4, 12242.0], [49.5, 12254.0], [49.6, 12279.0], [49.7, 12290.0], [49.8, 12302.0], [49.9, 12312.0], [50.0, 12326.0], [50.1, 12339.0], [50.2, 12364.0], [50.3, 12379.0], [50.4, 12404.0], [50.5, 12411.0], [50.6, 12429.0], [50.7, 12438.0], [50.8, 12459.0], [50.9, 12476.0], [51.0, 12489.0], [51.1, 12500.0], [51.2, 12509.0], [51.3, 12523.0], [51.4, 12542.0], [51.5, 12568.0], [51.6, 12583.0], [51.7, 12593.0], [51.8, 12606.0], [51.9, 12616.0], [52.0, 12625.0], [52.1, 12636.0], [52.2, 12651.0], [52.3, 12663.0], [52.4, 12676.0], [52.5, 12691.0], [52.6, 12710.0], [52.7, 12723.0], [52.8, 12732.0], [52.9, 12745.0], [53.0, 12759.0], [53.1, 12776.0], [53.2, 12788.0], [53.3, 12813.0], [53.4, 12826.0], [53.5, 12833.0], [53.6, 12843.0], [53.7, 12863.0], [53.8, 12876.0], [53.9, 12885.0], [54.0, 12902.0], [54.1, 12930.0], [54.2, 12946.0], [54.3, 12965.0], [54.4, 12979.0], [54.5, 12999.0], [54.6, 13016.0], [54.7, 13026.0], [54.8, 13036.0], [54.9, 13050.0], [55.0, 13060.0], [55.1, 13072.0], [55.2, 13094.0], [55.3, 13107.0], [55.4, 13111.0], [55.5, 13117.0], [55.6, 13128.0], [55.7, 13146.0], [55.8, 13156.0], [55.9, 13168.0], [56.0, 13183.0], [56.1, 13193.0], [56.2, 13209.0], [56.3, 13227.0], [56.4, 13246.0], [56.5, 13258.0], [56.6, 13268.0], [56.7, 13279.0], [56.8, 13293.0], [56.9, 13302.0], [57.0, 13316.0], [57.1, 13328.0], [57.2, 13346.0], [57.3, 13357.0], [57.4, 13373.0], [57.5, 13387.0], [57.6, 13394.0], [57.7, 13404.0], [57.8, 13424.0], [57.9, 13441.0], [58.0, 13454.0], [58.1, 13464.0], [58.2, 13472.0], [58.3, 13490.0], [58.4, 13504.0], [58.5, 13517.0], [58.6, 13532.0], [58.7, 13545.0], [58.8, 13556.0], [58.9, 13566.0], [59.0, 13574.0], [59.1, 13591.0], [59.2, 13610.0], [59.3, 13620.0], [59.4, 13630.0], [59.5, 13636.0], [59.6, 13648.0], [59.7, 13665.0], [59.8, 13676.0], [59.9, 13684.0], [60.0, 13694.0], [60.1, 13707.0], [60.2, 13723.0], [60.3, 13731.0], [60.4, 13742.0], [60.5, 13750.0], [60.6, 13764.0], [60.7, 13776.0], [60.8, 13787.0], [60.9, 13802.0], [61.0, 13821.0], [61.1, 13832.0], [61.2, 13839.0], [61.3, 13849.0], [61.4, 13862.0], [61.5, 13871.0], [61.6, 13878.0], [61.7, 13899.0], [61.8, 13909.0], [61.9, 13918.0], [62.0, 13935.0], [62.1, 13946.0], [62.2, 13956.0], [62.3, 13967.0], [62.4, 13980.0], [62.5, 13988.0], [62.6, 14009.0], [62.7, 14020.0], [62.8, 14036.0], [62.9, 14044.0], [63.0, 14053.0], [63.1, 14073.0], [63.2, 14086.0], [63.3, 14093.0], [63.4, 14100.0], [63.5, 14116.0], [63.6, 14131.0], [63.7, 14143.0], [63.8, 14154.0], [63.9, 14163.0], [64.0, 14176.0], [64.1, 14189.0], [64.2, 14206.0], [64.3, 14220.0], [64.4, 14227.0], [64.5, 14240.0], [64.6, 14250.0], [64.7, 14256.0], [64.8, 14265.0], [64.9, 14276.0], [65.0, 14286.0], [65.1, 14294.0], [65.2, 14315.0], [65.3, 14329.0], [65.4, 14341.0], [65.5, 14351.0], [65.6, 14370.0], [65.7, 14388.0], [65.8, 14399.0], [65.9, 14410.0], [66.0, 14421.0], [66.1, 14431.0], [66.2, 14441.0], [66.3, 14453.0], [66.4, 14461.0], [66.5, 14470.0], [66.6, 14491.0], [66.7, 14504.0], [66.8, 14516.0], [66.9, 14528.0], [67.0, 14540.0], [67.1, 14553.0], [67.2, 14561.0], [67.3, 14574.0], [67.4, 14589.0], [67.5, 14600.0], [67.6, 14610.0], [67.7, 14618.0], [67.8, 14627.0], [67.9, 14633.0], [68.0, 14640.0], [68.1, 14654.0], [68.2, 14661.0], [68.3, 14675.0], [68.4, 14687.0], [68.5, 14697.0], [68.6, 14711.0], [68.7, 14722.0], [68.8, 14726.0], [68.9, 14733.0], [69.0, 14745.0], [69.1, 14760.0], [69.2, 14778.0], [69.3, 14790.0], [69.4, 14803.0], [69.5, 14809.0], [69.6, 14820.0], [69.7, 14834.0], [69.8, 14846.0], [69.9, 14856.0], [70.0, 14864.0], [70.1, 14872.0], [70.2, 14886.0], [70.3, 14899.0], [70.4, 14904.0], [70.5, 14913.0], [70.6, 14920.0], [70.7, 14935.0], [70.8, 14948.0], [70.9, 14962.0], [71.0, 14970.0], [71.1, 14978.0], [71.2, 14986.0], [71.3, 14995.0], [71.4, 15016.0], [71.5, 15027.0], [71.6, 15039.0], [71.7, 15048.0], [71.8, 15063.0], [71.9, 15068.0], [72.0, 15075.0], [72.1, 15082.0], [72.2, 15091.0], [72.3, 15102.0], [72.4, 15108.0], [72.5, 15122.0], [72.6, 15132.0], [72.7, 15145.0], [72.8, 15155.0], [72.9, 15168.0], [73.0, 15177.0], [73.1, 15185.0], [73.2, 15190.0], [73.3, 15205.0], [73.4, 15221.0], [73.5, 15233.0], [73.6, 15244.0], [73.7, 15256.0], [73.8, 15261.0], [73.9, 15271.0], [74.0, 15283.0], [74.1, 15300.0], [74.2, 15318.0], [74.3, 15330.0], [74.4, 15337.0], [74.5, 15349.0], [74.6, 15360.0], [74.7, 15372.0], [74.8, 15379.0], [74.9, 15388.0], [75.0, 15398.0], [75.1, 15404.0], [75.2, 15418.0], [75.3, 15433.0], [75.4, 15439.0], [75.5, 15450.0], [75.6, 15460.0], [75.7, 15469.0], [75.8, 15479.0], [75.9, 15487.0], [76.0, 15501.0], [76.1, 15523.0], [76.2, 15537.0], [76.3, 15546.0], [76.4, 15558.0], [76.5, 15565.0], [76.6, 15575.0], [76.7, 15584.0], [76.8, 15596.0], [76.9, 15607.0], [77.0, 15614.0], [77.1, 15624.0], [77.2, 15629.0], [77.3, 15644.0], [77.4, 15656.0], [77.5, 15668.0], [77.6, 15673.0], [77.7, 15683.0], [77.8, 15690.0], [77.9, 15704.0], [78.0, 15717.0], [78.1, 15726.0], [78.2, 15733.0], [78.3, 15747.0], [78.4, 15756.0], [78.5, 15772.0], [78.6, 15778.0], [78.7, 15788.0], [78.8, 15803.0], [78.9, 15816.0], [79.0, 15825.0], [79.1, 15832.0], [79.2, 15838.0], [79.3, 15852.0], [79.4, 15864.0], [79.5, 15871.0], [79.6, 15885.0], [79.7, 15905.0], [79.8, 15921.0], [79.9, 15934.0], [80.0, 15941.0], [80.1, 15951.0], [80.2, 15966.0], [80.3, 15977.0], [80.4, 15984.0], [80.5, 15995.0], [80.6, 16009.0], [80.7, 16024.0], [80.8, 16045.0], [80.9, 16054.0], [81.0, 16065.0], [81.1, 16079.0], [81.2, 16087.0], [81.3, 16100.0], [81.4, 16112.0], [81.5, 16123.0], [81.6, 16134.0], [81.7, 16153.0], [81.8, 16168.0], [81.9, 16178.0], [82.0, 16187.0], [82.1, 16197.0], [82.2, 16207.0], [82.3, 16219.0], [82.4, 16228.0], [82.5, 16243.0], [82.6, 16253.0], [82.7, 16268.0], [82.8, 16279.0], [82.9, 16288.0], [83.0, 16296.0], [83.1, 16307.0], [83.2, 16316.0], [83.3, 16326.0], [83.4, 16343.0], [83.5, 16359.0], [83.6, 16367.0], [83.7, 16375.0], [83.8, 16390.0], [83.9, 16399.0], [84.0, 16410.0], [84.1, 16423.0], [84.2, 16434.0], [84.3, 16451.0], [84.4, 16463.0], [84.5, 16476.0], [84.6, 16492.0], [84.7, 16510.0], [84.8, 16523.0], [84.9, 16543.0], [85.0, 16559.0], [85.1, 16571.0], [85.2, 16586.0], [85.3, 16598.0], [85.4, 16618.0], [85.5, 16631.0], [85.6, 16642.0], [85.7, 16654.0], [85.8, 16669.0], [85.9, 16683.0], [86.0, 16702.0], [86.1, 16709.0], [86.2, 16727.0], [86.3, 16737.0], [86.4, 16749.0], [86.5, 16764.0], [86.6, 16776.0], [86.7, 16786.0], [86.8, 16794.0], [86.9, 16803.0], [87.0, 16822.0], [87.1, 16835.0], [87.2, 16847.0], [87.3, 16859.0], [87.4, 16866.0], [87.5, 16880.0], [87.6, 16891.0], [87.7, 16910.0], [87.8, 16921.0], [87.9, 16934.0], [88.0, 16942.0], [88.1, 16956.0], [88.2, 16971.0], [88.3, 16981.0], [88.4, 16996.0], [88.5, 17001.0], [88.6, 17028.0], [88.7, 17043.0], [88.8, 17062.0], [88.9, 17073.0], [89.0, 17083.0], [89.1, 17094.0], [89.2, 17107.0], [89.3, 17122.0], [89.4, 17133.0], [89.5, 17149.0], [89.6, 17157.0], [89.7, 17173.0], [89.8, 17189.0], [89.9, 17198.0], [90.0, 17214.0], [90.1, 17225.0], [90.2, 17236.0], [90.3, 17241.0], [90.4, 17257.0], [90.5, 17267.0], [90.6, 17284.0], [90.7, 17291.0], [90.8, 17299.0], [90.9, 17310.0], [91.0, 17320.0], [91.1, 17331.0], [91.2, 17344.0], [91.3, 17354.0], [91.4, 17362.0], [91.5, 17373.0], [91.6, 17385.0], [91.7, 17398.0], [91.8, 17409.0], [91.9, 17418.0], [92.0, 17434.0], [92.1, 17445.0], [92.2, 17456.0], [92.3, 17468.0], [92.4, 17480.0], [92.5, 17492.0], [92.6, 17503.0], [92.7, 17515.0], [92.8, 17525.0], [92.9, 17535.0], [93.0, 17543.0], [93.1, 17553.0], [93.2, 17565.0], [93.3, 17579.0], [93.4, 17584.0], [93.5, 17595.0], [93.6, 17604.0], [93.7, 17625.0], [93.8, 17639.0], [93.9, 17653.0], [94.0, 17667.0], [94.1, 17686.0], [94.2, 17696.0], [94.3, 17710.0], [94.4, 17720.0], [94.5, 17733.0], [94.6, 17743.0], [94.7, 17757.0], [94.8, 17771.0], [94.9, 17785.0], [95.0, 17802.0], [95.1, 17813.0], [95.2, 17833.0], [95.3, 17860.0], [95.4, 17880.0], [95.5, 17895.0], [95.6, 17909.0], [95.7, 17919.0], [95.8, 17933.0], [95.9, 17945.0], [96.0, 17975.0], [96.1, 18002.0], [96.2, 18018.0], [96.3, 18050.0], [96.4, 18074.0], [96.5, 18103.0], [96.6, 18128.0], [96.7, 18149.0], [96.8, 18177.0], [96.9, 18205.0], [97.0, 18230.0], [97.1, 18252.0], [97.2, 18276.0], [97.3, 18299.0], [97.4, 18323.0], [97.5, 18361.0], [97.6, 18391.0], [97.7, 18416.0], [97.8, 18438.0], [97.9, 18477.0], [98.0, 18504.0], [98.1, 18521.0], [98.2, 18544.0], [98.3, 18588.0], [98.4, 18611.0], [98.5, 18644.0], [98.6, 18684.0], [98.7, 18737.0], [98.8, 18789.0], [98.9, 18843.0], [99.0, 18914.0], [99.1, 18972.0], [99.2, 19082.0], [99.3, 19173.0], [99.4, 19268.0], [99.5, 19383.0], [99.6, 19465.0], [99.7, 19632.0], [99.8, 19828.0], [99.9, 20007.0], [100.0, 20684.0]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 105.0, "series": [{"data": [[0.0, 4.0], [100.0, 16.0], [200.0, 17.0], [300.0, 14.0], [400.0, 14.0], [500.0, 16.0], [600.0, 14.0], [700.0, 19.0], [800.0, 13.0], [900.0, 20.0], [1000.0, 14.0], [1100.0, 10.0], [1200.0, 22.0], [1300.0, 23.0], [1400.0, 12.0], [1500.0, 13.0], [1600.0, 15.0], [1700.0, 19.0], [1800.0, 24.0], [1900.0, 20.0], [2000.0, 13.0], [2100.0, 26.0], [2200.0, 20.0], [2300.0, 13.0], [2400.0, 19.0], [2500.0, 23.0], [2600.0, 21.0], [2700.0, 25.0], [2800.0, 13.0], [2900.0, 19.0], [3000.0, 26.0], [3100.0, 31.0], [3300.0, 29.0], [3200.0, 27.0], [3400.0, 27.0], [3500.0, 29.0], [3600.0, 30.0], [3700.0, 29.0], [3800.0, 31.0], [3900.0, 29.0], [4000.0, 23.0], [4200.0, 29.0], [4300.0, 29.0], [4100.0, 19.0], [4500.0, 29.0], [4400.0, 35.0], [4600.0, 26.0], [4800.0, 32.0], [4700.0, 31.0], [5000.0, 33.0], [5100.0, 43.0], [4900.0, 27.0], [5200.0, 39.0], [5300.0, 35.0], [5400.0, 37.0], [5500.0, 30.0], [5600.0, 32.0], [5700.0, 30.0], [5800.0, 35.0], [6100.0, 33.0], [5900.0, 28.0], [6000.0, 36.0], [6200.0, 41.0], [6300.0, 54.0], [6400.0, 43.0], [6500.0, 49.0], [6600.0, 47.0], [6900.0, 32.0], [6800.0, 46.0], [6700.0, 53.0], [7100.0, 34.0], [7000.0, 53.0], [7400.0, 60.0], [7300.0, 49.0], [7200.0, 33.0], [7600.0, 50.0], [7500.0, 47.0], [7900.0, 55.0], [7700.0, 49.0], [7800.0, 42.0], [8100.0, 55.0], [8000.0, 46.0], [8300.0, 45.0], [8600.0, 55.0], [8200.0, 41.0], [8400.0, 51.0], [8500.0, 46.0], [8700.0, 55.0], [8800.0, 61.0], [9100.0, 62.0], [9000.0, 54.0], [8900.0, 42.0], [9200.0, 35.0], [9300.0, 59.0], [9400.0, 61.0], [9500.0, 56.0], [9600.0, 45.0], [9700.0, 57.0], [9800.0, 44.0], [10000.0, 53.0], [9900.0, 50.0], [10200.0, 64.0], [10100.0, 55.0], [10300.0, 60.0], [10500.0, 54.0], [10600.0, 61.0], [10400.0, 65.0], [10700.0, 75.0], [11000.0, 73.0], [10800.0, 66.0], [10900.0, 82.0], [11100.0, 78.0], [11200.0, 75.0], [11400.0, 104.0], [11700.0, 78.0], [11600.0, 84.0], [11300.0, 81.0], [11500.0, 82.0], [11800.0, 75.0], [12200.0, 60.0], [12100.0, 72.0], [12000.0, 64.0], [11900.0, 70.0], [12400.0, 72.0], [12700.0, 71.0], [12600.0, 79.0], [12300.0, 59.0], [12500.0, 67.0], [12900.0, 52.0], [13100.0, 89.0], [12800.0, 72.0], [13300.0, 79.0], [13000.0, 75.0], [13200.0, 74.0], [13700.0, 82.0], [13500.0, 78.0], [13600.0, 90.0], [13400.0, 70.0], [13800.0, 85.0], [14000.0, 82.0], [13900.0, 85.0], [14100.0, 77.0], [14200.0, 96.0], [14300.0, 68.0], [14400.0, 86.0], [14600.0, 102.0], [14500.0, 82.0], [14700.0, 87.0], [14800.0, 94.0], [15300.0, 96.0], [15200.0, 86.0], [15000.0, 92.0], [14900.0, 104.0], [15100.0, 95.0], [15400.0, 95.0], [15800.0, 90.0], [15600.0, 105.0], [15500.0, 83.0], [15700.0, 90.0], [16300.0, 88.0], [16100.0, 83.0], [16200.0, 90.0], [16000.0, 75.0], [15900.0, 87.0], [16600.0, 67.0], [17400.0, 85.0], [16800.0, 80.0], [17200.0, 91.0], [16400.0, 77.0], [17000.0, 67.0], [18200.0, 42.0], [18000.0, 37.0], [17800.0, 56.0], [18400.0, 35.0], [17600.0, 66.0], [18600.0, 30.0], [19000.0, 8.0], [19200.0, 11.0], [18800.0, 12.0], [19400.0, 9.0], [19600.0, 10.0], [19800.0, 4.0], [20200.0, 1.0], [20000.0, 7.0], [20600.0, 1.0], [17300.0, 89.0], [16700.0, 85.0], [16500.0, 64.0], [16900.0, 86.0], [17100.0, 74.0], [17900.0, 55.0], [17700.0, 75.0], [18100.0, 42.0], [18300.0, 32.0], [17500.0, 102.0], [18900.0, 18.0], [18500.0, 37.0], [19300.0, 12.0], [19100.0, 9.0], [18700.0, 19.0], [19900.0, 6.0], [19700.0, 3.0], [19500.0, 4.0], [20300.0, 2.0]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 65.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9772.0, "series": [{"data": [[0.0, 65.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 163.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9772.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 193.15675675675658, "minX": 1.54407276E12, "maxY": 782.7475994513021, "series": [{"data": [[1.54407288E12, 782.7475994513021], [1.54407276E12, 193.15675675675658], [1.54407294E12, 483.9902184545159], [1.54407282E12, 569.7898603967678]], "isOverall": false, "label": "GET_ENTIDADES", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407294E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 108.0, "minX": 1.0, "maxY": 18668.0, "series": [{"data": [[2.0, 108.0], [3.0, 493.5], [4.0, 373.0], [5.0, 384.25], [6.0, 707.0], [7.0, 418.6], [8.0, 203.0], [9.0, 950.25], [10.0, 3895.0], [11.0, 551.75], [12.0, 484.6], [13.0, 985.0], [14.0, 1069.0], [15.0, 796.3333333333334], [16.0, 1441.5], [17.0, 319.25], [18.0, 1302.4], [19.0, 1030.6666666666665], [20.0, 650.6666666666667], [21.0, 607.5], [22.0, 1627.5], [23.0, 1561.0], [24.0, 3040.0], [25.0, 608.1666666666667], [26.0, 2477.25], [27.0, 802.5], [28.0, 895.75], [29.0, 2480.5], [30.0, 762.0], [31.0, 3230.0], [32.0, 1386.0], [33.0, 739.6666666666666], [34.0, 1378.25], [35.0, 561.3333333333334], [36.0, 2038.0], [37.0, 989.0], [38.0, 1518.6666666666665], [39.0, 1951.5], [40.0, 864.875], [41.0, 1274.1666666666665], [42.0, 1174.5714285714284], [43.0, 1133.142857142857], [44.0, 1569.0], [45.0, 2619.0], [46.0, 1053.0], [47.0, 2919.0], [48.0, 1777.4], [49.0, 2577.0], [50.0, 1190.909090909091], [51.0, 3204.0], [52.0, 2072.5], [53.0, 1244.5555555555557], [54.0, 1645.0], [55.0, 3342.0], [56.0, 2775.666666666667], [57.0, 1383.375], [58.0, 1468.5], [59.0, 2361.0], [60.0, 1432.2857142857144], [61.0, 2301.0], [62.0, 1849.857142857143], [63.0, 3742.0], [64.0, 2187.0], [65.0, 2177.5], [66.0, 1863.0], [67.0, 1577.6666666666665], [68.0, 1911.6], [69.0, 2244.5], [70.0, 2684.5], [71.0, 2428.0], [72.0, 2332.0], [73.0, 2903.5], [74.0, 1828.6666666666667], [75.0, 2175.5], [76.0, 2393.4], [78.0, 2268.4], [79.0, 2046.5], [77.0, 3703.0], [80.0, 2089.8], [81.0, 2502.6666666666665], [82.0, 2705.0], [83.0, 1970.6], [84.0, 3379.5], [85.0, 3303.5], [86.0, 2085.0], [87.0, 2795.5], [88.0, 2824.3333333333335], [89.0, 2721.0], [90.0, 2934.333333333333], [91.0, 2566.3333333333335], [92.0, 2969.666666666667], [93.0, 2465.6], [94.0, 2340.285714285714], [95.0, 1735.0], [96.0, 2164.0555555555557], [97.0, 3752.0], [99.0, 3435.5], [98.0, 4096.0], [100.0, 2126.4], [101.0, 1892.5], [103.0, 3131.0], [102.0, 6352.0], [104.0, 2205.8], [105.0, 2665.6], [106.0, 2750.0], [107.0, 3032.25], [108.0, 2638.6666666666665], [109.0, 2877.25], [111.0, 3019.6666666666665], [110.0, 3752.0], [112.0, 3292.75], [114.0, 3386.0], [115.0, 2562.2], [113.0, 4675.0], [116.0, 3213.0], [117.0, 2878.25], [118.0, 3084.3333333333335], [119.0, 2764.3333333333335], [120.0, 4041.5], [121.0, 4823.0], [122.0, 2191.8571428571427], [123.0, 2693.285714285714], [124.0, 2517.0], [125.0, 2839.714285714286], [127.0, 2524.0], [126.0, 5322.0], [128.0, 3189.5], [129.0, 2834.714285714286], [130.0, 3753.0], [131.0, 2975.5714285714284], [132.0, 3336.875], [133.0, 2828.2], [134.0, 3078.8], [135.0, 3400.5], [137.0, 4985.333333333333], [138.0, 4066.0], [139.0, 4088.5], [140.0, 3570.0], [141.0, 4437.0], [142.0, 3354.25], [143.0, 2756.3333333333335], [136.0, 5158.0], [144.0, 3682.6], [145.0, 3691.0], [146.0, 3738.333333333333], [147.0, 4589.5], [148.0, 4865.5], [149.0, 3237.666666666667], [150.0, 3267.4], [151.0, 4628.833333333333], [152.0, 4251.5], [157.0, 3119.0], [158.0, 2973.2173913043475], [159.0, 4872.5], [156.0, 6996.0], [155.0, 6099.0], [154.0, 6446.0], [153.0, 5315.0], [165.0, 4166.933333333333], [166.0, 4837.0], [167.0, 3500.4999999999995], [164.0, 5123.0], [163.0, 5810.0], [162.0, 5513.0], [161.0, 6120.5], [160.0, 5462.0], [168.0, 3800.1428571428573], [169.0, 4013.222222222222], [170.0, 3824.3333333333335], [171.0, 4272.6], [172.0, 5109.4], [174.0, 5135.5], [175.0, 5101.0], [173.0, 5707.5], [176.0, 4338.2], [177.0, 4337.444444444444], [178.0, 3960.25], [179.0, 5248.0], [180.0, 4476.666666666667], [181.0, 4320.125], [183.0, 5236.75], [182.0, 5686.0], [184.0, 5068.5], [185.0, 4792.0], [187.0, 5040.333333333333], [188.0, 3098.0], [189.0, 5034.0], [191.0, 4141.25], [190.0, 6358.0], [186.0, 6288.0], [194.0, 4941.0], [195.0, 4114.444444444444], [196.0, 5280.857142857142], [197.0, 4214.0], [198.0, 4370.0], [199.0, 4227.666666666667], [193.0, 5433.0], [192.0, 6813.0], [200.0, 3987.6363636363635], [201.0, 4246.5], [202.0, 3681.1538461538457], [203.0, 3746.583333333333], [204.0, 4396.900000000001], [205.0, 4780.125], [206.0, 3580.5], [207.0, 6521.0], [212.0, 4445.045454545455], [211.0, 4156.575757575757], [214.0, 4567.4], [215.0, 4068.0], [213.0, 6788.4], [210.0, 6354.0], [209.0, 7226.0], [208.0, 6456.875], [216.0, 5217.090909090908], [218.0, 5336.125], [219.0, 5378.315789473684], [220.0, 6854.0], [223.0, 6452.0], [222.0, 8875.0], [221.0, 7624.0], [217.0, 6749.0], [231.0, 5421.099999999999], [230.0, 7448.0], [229.0, 7458.0], [228.0, 7136.333333333333], [227.0, 7749.0], [226.0, 7314.0], [225.0, 7041.0], [224.0, 7835.0], [232.0, 5156.444444444444], [233.0, 4154.318181818181], [234.0, 4201.78947368421], [235.0, 4287.0], [237.0, 5091.0], [236.0, 4849.0], [239.0, 7375.0], [238.0, 6641.5], [240.0, 5829.5], [246.0, 4403.5], [247.0, 4376.357142857143], [245.0, 7279.2], [244.0, 6929.666666666667], [243.0, 7234.0], [242.0, 6959.0], [248.0, 6830.25], [249.0, 6638.2], [250.0, 5941.272727272729], [252.0, 6469.333333333333], [253.0, 4702.111111111112], [254.0, 5473.166666666667], [255.0, 4895.0], [251.0, 7631.0], [263.0, 6590.25], [262.0, 5653.111111111112], [261.0, 4880.0], [260.0, 4697.5], [259.0, 5856.333333333333], [258.0, 7578.0], [257.0, 7019.0], [256.0, 6739.0], [268.0, 5631.2], [269.0, 5958.875], [270.0, 6430.9000000000015], [271.0, 6975.571428571428], [264.0, 6504.333333333333], [265.0, 5785.777777777777], [266.0, 5611.833333333334], [267.0, 5341.142857142857], [284.0, 5216.666666666667], [274.0, 5910.25], [275.0, 4656.0], [278.0, 6315.0], [277.0, 7631.5], [276.0, 8481.0], [279.0, 7541.75], [273.0, 7009.4], [272.0, 7081.0], [280.0, 5888.800000000001], [281.0, 5697.222222222223], [282.0, 5601.272727272728], [283.0, 6287.5], [286.0, 7015.4], [285.0, 9041.0], [287.0, 7769.0], [300.0, 7310.222222222223], [296.0, 7534.636363636364], [289.0, 6774.0], [288.0, 7978.666666666667], [291.0, 7802.0], [290.0, 7763.8], [295.0, 7366.0], [294.0, 8042.0], [293.0, 7826.0], [292.0, 8078.5], [297.0, 5614.613636363635], [298.0, 7614.5], [301.0, 5715.387755102039], [302.0, 6047.777777777779], [303.0, 7196.166666666666], [299.0, 8274.5], [307.0, 6099.400000000001], [305.0, 5913.25], [304.0, 6517.8], [311.0, 8060.0], [306.0, 6568.666666666667], [308.0, 6190.714285714285], [309.0, 7412.0], [310.0, 6051.0], [312.0, 6110.2307692307695], [318.0, 6502.923076923077], [319.0, 7867.5], [316.0, 6905.571428571428], [317.0, 6664.5], [313.0, 6538.833333333334], [315.0, 5643.0], [314.0, 6621.75], [321.0, 5821.0], [320.0, 7400.5], [322.0, 5468.666666666667], [323.0, 7672.666666666667], [324.0, 5092.4], [325.0, 6351.7692307692305], [326.0, 6740.777777777777], [327.0, 7617.0], [328.0, 6927.684210526315], [335.0, 5976.533333333334], [332.0, 7621.0], [333.0, 8526.0], [334.0, 8267.25], [329.0, 7879.374999999999], [330.0, 6112.785714285713], [331.0, 6119.111111111111], [339.0, 7950.5], [336.0, 6853.5], [337.0, 6263.2], [338.0, 6668.333333333334], [340.0, 7783.142857142857], [342.0, 8797.125], [341.0, 8294.0], [343.0, 8597.166666666666], [347.0, 6660.6875], [349.0, 7119.5], [348.0, 8350.5], [350.0, 7982.666666666667], [351.0, 7981.555555555555], [345.0, 8750.199999999999], [344.0, 8596.333333333334], [346.0, 8782.0], [353.0, 8271.5], [352.0, 7384.78947368421], [354.0, 7879.555555555556], [355.0, 8368.181818181818], [356.0, 7571.0], [357.0, 7088.933333333333], [358.0, 8161.333333333333], [359.0, 7027.666666666667], [360.0, 7153.333333333333], [367.0, 8318.0], [366.0, 9149.0], [365.0, 8877.666666666666], [364.0, 10114.666666666666], [361.0, 7729.125], [362.0, 7464.5], [363.0, 8353.0], [380.0, 8080.583333333333], [375.0, 7183.857142857143], [371.0, 8052.048780487806], [370.0, 9603.4], [369.0, 9130.0], [368.0, 8182.0], [372.0, 7306.0], [374.0, 9039.666666666666], [373.0, 8621.25], [376.0, 8983.5], [377.0, 7110.000000000001], [378.0, 8559.5], [379.0, 7395.857142857143], [381.0, 8886.78787878788], [382.0, 7551.75], [383.0, 9064.25], [398.0, 7628.555555555556], [390.0, 7585.851851851852], [389.0, 6866.0], [388.0, 10484.5], [391.0, 7503.785714285714], [392.0, 9057.625], [399.0, 9619.0], [393.0, 8408.2], [394.0, 9171.5], [395.0, 7538.5], [396.0, 8049.5], [387.0, 9332.0], [386.0, 10709.0], [385.0, 9733.333333333334], [384.0, 9220.0], [397.0, 7082.555555555557], [401.0, 8683.4], [400.0, 7769.7], [402.0, 8271.0], [403.0, 9018.0], [412.0, 9533.0], [413.0, 8711.555555555555], [414.0, 8483.222222222224], [415.0, 8283.666666666666], [404.0, 8072.357142857142], [405.0, 9100.0], [406.0, 9245.281250000002], [407.0, 9179.285714285716], [408.0, 8394.0], [409.0, 9193.2], [410.0, 8001.0], [411.0, 9797.0], [417.0, 8256.888888888889], [419.0, 9762.57142857143], [418.0, 10236.8], [428.0, 8823.222222222223], [429.0, 9492.6], [431.0, 8776.857142857143], [430.0, 7696.777777777777], [420.0, 9580.199999999999], [422.0, 9569.0625], [421.0, 10305.555555555555], [423.0, 9385.428571428572], [416.0, 11387.0], [424.0, 8508.142857142857], [425.0, 9433.0], [426.0, 9019.900000000001], [427.0, 9550.111111111111], [433.0, 9144.714285714286], [432.0, 9324.857142857143], [434.0, 10728.555555555557], [435.0, 9238.666666666666], [436.0, 9128.181818181818], [437.0, 9284.000000000002], [438.0, 9751.42857142857], [439.0, 10270.827586206895], [440.0, 9139.0], [445.0, 8897.933333333334], [444.0, 8491.0], [446.0, 9350.75], [447.0, 8855.666666666666], [441.0, 10275.0], [443.0, 10582.5], [442.0, 10035.42857142857], [449.0, 8735.571428571428], [448.0, 8967.833333333332], [450.0, 9702.875000000002], [451.0, 10622.4], [452.0, 9377.285714285714], [453.0, 10554.833333333334], [454.0, 9802.95], [455.0, 9752.0], [458.0, 9411.000000000002], [460.0, 10402.2], [461.0, 9088.666666666666], [462.0, 8823.733333333334], [463.0, 9606.909090909092], [457.0, 11092.5], [456.0, 10903.5], [459.0, 8922.166666666668], [465.0, 9650.692307692307], [464.0, 9321.444444444445], [466.0, 9997.07142857143], [468.0, 10058.166666666666], [467.0, 9579.90909090909], [469.0, 10453.888888888889], [470.0, 9481.78947368421], [471.0, 9812.421052631582], [472.0, 9334.0], [478.0, 10848.0], [479.0, 11208.6], [476.0, 10564.25], [477.0, 9969.842105263157], [473.0, 10402.166666666666], [474.0, 10387.0], [475.0, 11239.199999999997], [482.0, 9118.470588235296], [481.0, 9430.636363636364], [483.0, 10057.5], [492.0, 9617.259259259257], [493.0, 9034.125], [494.0, 10073.529411764708], [495.0, 9109.6], [484.0, 10605.5], [485.0, 9633.5], [487.0, 10120.307692307693], [480.0, 11203.214285714284], [488.0, 11331.375], [489.0, 10263.666666666668], [491.0, 9533.111111111111], [490.0, 11000.75], [498.0, 10486.9], [497.0, 10708.199999999999], [496.0, 10404.5], [499.0, 11486.0], [508.0, 9506.888888888889], [509.0, 10636.285714285714], [510.0, 11022.608695652172], [511.0, 10987.4], [500.0, 10600.400000000001], [501.0, 10414.75], [502.0, 10719.0], [503.0, 11968.0], [504.0, 9614.800000000001], [505.0, 9446.0], [507.0, 9363.166666666668], [506.0, 12365.0], [515.0, 10137.384615384615], [512.0, 11132.9375], [527.0, 10018.0], [525.0, 9947.894736842105], [526.0, 10922.833333333332], [523.0, 10264.050000000001], [522.0, 11187.0], [524.0, 10820.2], [513.0, 10068.0], [514.0, 9912.666666666666], [516.0, 9846.181818181818], [517.0, 11207.583333333336], [518.0, 10807.15], [519.0, 10310.083333333334], [528.0, 10877.29411764706], [542.0, 10734.833333333332], [543.0, 10843.5], [540.0, 11762.827586206893], [541.0, 10840.181818181818], [538.0, 11693.70588235294], [539.0, 10893.625], [536.0, 11387.909090909092], [537.0, 10601.423076923076], [529.0, 11530.916666666666], [530.0, 10873.142857142859], [531.0, 10935.5], [532.0, 11012.125], [533.0, 11012.666666666666], [534.0, 11283.4], [535.0, 11223.0], [520.0, 10767.11111111111], [521.0, 9543.25], [546.0, 10857.941176470587], [544.0, 10913.846153846154], [547.0, 11003.933333333334], [545.0, 10920.785714285714], [548.0, 11890.476190476193], [549.0, 11543.75], [550.0, 11233.307692307691], [551.0, 10703.238095238095], [569.0, 12032.857142857143], [570.0, 12741.499999999998], [571.0, 11059.0], [572.0, 11626.0], [573.0, 11308.500000000004], [575.0, 11474.849999999999], [574.0, 11829.749999999998], [568.0, 11484.900000000001], [560.0, 10789.5], [561.0, 12544.9], [562.0, 12733.758620689654], [563.0, 11675.000000000002], [564.0, 11170.952380952383], [567.0, 11033.799999999997], [566.0, 12031.0], [565.0, 12251.0], [552.0, 10535.555555555555], [553.0, 12170.166666666668], [554.0, 12555.842105263158], [555.0, 11978.5], [556.0, 12271.25], [557.0, 12129.846153846154], [558.0, 10837.0], [559.0, 10962.5], [579.0, 11193.5], [576.0, 11906.2], [590.0, 12424.379310344826], [591.0, 12543.533333333335], [588.0, 12659.38095238095], [589.0, 11475.166666666666], [586.0, 11812.4], [587.0, 13051.684210526317], [577.0, 11274.500000000002], [578.0, 12640.192307692309], [580.0, 11699.666666666666], [581.0, 12706.235294117647], [582.0, 12591.615384615385], [583.0, 11411.5], [592.0, 12564.1], [607.0, 12891.0], [604.0, 12321.2], [605.0, 14183.142857142857], [606.0, 12791.2], [602.0, 10912.285714285714], [603.0, 12539.05128205128], [600.0, 12173.76923076923], [601.0, 12234.5], [593.0, 12505.777777777777], [594.0, 12601.888888888889], [595.0, 12572.1], [596.0, 11759.583333333334], [597.0, 13092.428571428572], [598.0, 13280.200000000003], [599.0, 11890.0], [584.0, 13232.916666666668], [585.0, 12674.11111111111], [614.0, 13129.470588235294], [610.0, 11489.888888888889], [608.0, 12162.88888888889], [609.0, 14123.800000000001], [623.0, 12809.666666666666], [621.0, 13643.65], [622.0, 13181.347826086958], [619.0, 11838.75], [618.0, 13632.0], [620.0, 12867.4], [611.0, 12357.285714285716], [612.0, 12673.090909090908], [613.0, 11530.6], [615.0, 12739.8], [632.0, 12906.09090909091], [634.0, 13279.454545454546], [635.0, 13498.0], [636.0, 13429.428571428572], [637.0, 13369.0], [638.0, 13032.142857142855], [639.0, 12282.909090909092], [624.0, 13469.5], [633.0, 13569.291666666666], [625.0, 12810.5], [626.0, 12538.941176470587], [627.0, 13538.733333333334], [628.0, 12519.333333333334], [630.0, 13576.95652173913], [629.0, 14638.0], [631.0, 12563.25], [616.0, 12162.777777777777], [617.0, 12947.562500000002], [665.0, 14304.695652173914], [641.0, 11941.333333333334], [642.0, 13006.434782608692], [643.0, 14604.666666666666], [645.0, 14812.333333333334], [644.0, 14486.6], [640.0, 13538.833333333332], [655.0, 14335.166666666668], [646.0, 14538.42857142857], [656.0, 13616.454545454546], [670.0, 13361.461538461539], [671.0, 14912.818181818182], [668.0, 13634.333333333334], [669.0, 14515.303797468356], [666.0, 13815.295454545454], [667.0, 13833.4], [664.0, 13909.588235294117], [647.0, 14456.203703703704], [657.0, 13993.75757575758], [658.0, 14102.833333333334], [659.0, 12138.8], [661.0, 13874.09090909091], [660.0, 12662.0], [663.0, 13009.0], [662.0, 14433.818181818182], [651.0, 12353.23076923077], [650.0, 12661.812499999998], [649.0, 13898.90909090909], [648.0, 12353.1875], [652.0, 12344.90909090909], [653.0, 13451.75], [654.0, 13334.529411764706], [675.0, 13706.0], [672.0, 13436.166666666666], [687.0, 14390.916666666664], [685.0, 14874.461538461535], [686.0, 14807.588235294115], [682.0, 13239.166666666668], [683.0, 15228.0], [684.0, 14344.21052631579], [673.0, 14289.923076923076], [674.0, 12641.0], [676.0, 12847.812499999998], [677.0, 13953.592592592593], [678.0, 13797.250000000004], [679.0, 13650.037037037035], [688.0, 13845.0], [703.0, 15582.5], [701.0, 14964.333333333332], [702.0, 14954.166666666666], [699.0, 13508.0], [700.0, 13127.0], [697.0, 14095.62962962963], [696.0, 13580.0], [698.0, 13736.0], [689.0, 15135.029411764708], [690.0, 13524.833333333332], [691.0, 14355.874999999998], [692.0, 14534.0], [693.0, 13275.2], [694.0, 13423.666666666666], [695.0, 14380.352941176472], [680.0, 13821.000000000002], [681.0, 13798.857142857145], [709.0, 13879.0], [705.0, 14424.857142857143], [704.0, 13614.0], [719.0, 14475.235294117647], [717.0, 14992.176470588236], [718.0, 13732.81818181818], [716.0, 14765.736842105265], [715.0, 13609.714285714286], [706.0, 15053.074074074075], [707.0, 14130.199999999999], [708.0, 13233.35294117647], [711.0, 14554.636363636362], [710.0, 15545.749999999998], [728.0, 14032.5], [729.0, 14728.333333333334], [730.0, 15052.923076923078], [731.0, 15387.2], [732.0, 14984.785714285716], [733.0, 15073.538461538463], [734.0, 15333.696969696968], [735.0, 15780.0], [720.0, 15254.475409836065], [721.0, 14291.0], [722.0, 13371.0], [723.0, 14467.772727272728], [724.0, 15137.666666666666], [725.0, 15846.727272727272], [726.0, 13846.916666666668], [727.0, 14680.842105263157], [713.0, 14691.416666666666], [712.0, 15594.000000000002], [714.0, 14207.23076923077], [741.0, 15658.75], [737.0, 15179.466666666665], [736.0, 15389.333333333332], [750.0, 14200.0], [751.0, 15565.142857142859], [748.0, 15282.142857142855], [749.0, 16498.4], [738.0, 15939.166666666668], [739.0, 16041.866666666667], [740.0, 16060.285714285714], [742.0, 16035.599999999999], [743.0, 15208.444444444445], [760.0, 15973.973684210523], [761.0, 16051.645161290324], [763.0, 15475.03448275862], [764.0, 15611.428571428572], [765.0, 15472.0], [766.0, 16143.699999999999], [767.0, 15956.0], [752.0, 15894.75], [754.0, 17907.0], [753.0, 15748.166666666666], [762.0, 16195.307692307691], [756.0, 16037.432098765434], [757.0, 16009.736842105263], [758.0, 15728.03448275862], [759.0, 15545.399999999998], [755.0, 15880.000000000002], [744.0, 14997.777777777777], [746.0, 15865.57142857143], [745.0, 15748.57142857143], [747.0, 13988.222222222223], [771.0, 15768.650000000001], [768.0, 16554.5], [782.0, 17076.785714285717], [783.0, 17190.57142857143], [780.0, 16552.409090909092], [781.0, 16558.333333333332], [778.0, 16878.783333333336], [779.0, 16383.777777777776], [769.0, 15163.454545454544], [770.0, 16280.777777777777], [772.0, 16529.928571428572], [773.0, 16549.882352941175], [774.0, 14786.933333333332], [775.0, 15798.961538461537], [784.0, 16611.237288135595], [799.0, 17478.458333333336], [798.0, 17151.0], [792.0, 16942.85714285714], [794.0, 17737.200000000004], [793.0, 18321.449999999997], [796.0, 17630.0], [795.0, 17358.0], [797.0, 17077.21568627451], [785.0, 16223.67857142857], [786.0, 16468.76], [787.0, 15828.947368421052], [788.0, 16652.433333333338], [789.0, 17281.86956521739], [790.0, 17320.26666666667], [791.0, 15608.473684210529], [776.0, 15221.142857142857], [777.0, 16207.35294117647], [803.0, 16849.20930232558], [801.0, 17880.451612903227], [800.0, 15538.640000000001], [814.0, 16129.357142857143], [815.0, 18290.285714285714], [812.0, 17386.559999999998], [813.0, 15986.833333333332], [810.0, 18310.463414634152], [811.0, 15802.0], [802.0, 17512.43333333333], [804.0, 16520.153846153844], [805.0, 15084.61111111111], [806.0, 15507.410256410258], [807.0, 14960.625], [824.0, 16700.85714285714], [825.0, 16681.081967213122], [826.0, 17426.142857142855], [827.0, 16939.315789473687], [828.0, 16568.035714285717], [829.0, 16032.0], [830.0, 16286.4], [831.0, 15346.888888888889], [823.0, 17034.833333333332], [822.0, 17697.40740740741], [821.0, 17676.952830188686], [820.0, 17765.14285714286], [819.0, 18668.0], [818.0, 17924.52631578947], [817.0, 17863.75], [816.0, 18080.434782608696], [808.0, 15685.444444444445], [809.0, 18235.666666666664], [835.0, 16696.16666666667], [832.0, 16552.222222222226], [846.0, 15173.25], [847.0, 15924.277777777777], [844.0, 15804.9375], [845.0, 16152.25], [842.0, 16005.708333333332], [843.0, 16391.15], [833.0, 15571.166666666666], [834.0, 16739.59210526315], [836.0, 16051.846153846154], [837.0, 15618.0], [838.0, 15973.909090909088], [839.0, 16588.210526315786], [848.0, 15799.776470588236], [849.0, 15863.142857142857], [850.0, 15601.967741935485], [851.0, 15336.000000000002], [852.0, 15526.411764705883], [854.0, 15430.285714285716], [853.0, 15557.25], [840.0, 15849.105263157895], [841.0, 15955.000000000004], [1.0, 1261.0]], "isOverall": false, "label": "GET Request", "isController": false}, {"data": [[556.799599999998, 11636.096000000029]], "isOverall": false, "label": "GET Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 854.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3777.0833333333335, "minX": 1.54407276E12, "maxY": 51218.9, "series": [{"data": [[1.54407288E12, 48697.2], [1.54407276E12, 21626.5], [1.54407294E12, 51218.9], [1.54407282E12, 45457.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54407288E12, 8505.0], [1.54407276E12, 3777.0833333333335], [1.54407294E12, 8945.416666666666], [1.54407282E12, 7939.166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407294E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3619.1274131274135, "minX": 1.54407276E12, "maxY": 16535.89917695476, "series": [{"data": [[1.54407288E12, 16535.89917695476], [1.54407276E12, 3619.1274131274135], [1.54407294E12, 11281.204434300627], [1.54407282E12, 10601.048493754606]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407294E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3602.9428571428566, "minX": 1.54407276E12, "maxY": 16513.960219478737, "series": [{"data": [[1.54407288E12, 16513.960219478737], [1.54407276E12, 3602.9428571428566], [1.54407294E12, 11260.214541897603], [1.54407282E12, 10573.500000000015]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407294E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 613.3011583011581, "minX": 1.54407276E12, "maxY": 9596.35493827162, "series": [{"data": [[1.54407288E12, 9596.35493827162], [1.54407276E12, 613.3011583011581], [1.54407294E12, 5915.942614933156], [1.54407282E12, 4976.637031594419]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407294E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 88.0, "minX": 1.54407276E12, "maxY": 20684.0, "series": [{"data": [[1.54407288E12, 20684.0], [1.54407276E12, 8391.0], [1.54407294E12, 17525.0], [1.54407282E12, 18299.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54407288E12, 9595.0], [1.54407276E12, 88.0], [1.54407294E12, 128.0], [1.54407282E12, 3901.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54407288E12, 17551.2], [1.54407276E12, 5951.0], [1.54407294E12, 17214.0], [1.54407282E12, 13463.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54407288E12, 19213.199999999997], [1.54407276E12, 7141.7199999999975], [1.54407294E12, 18915.98], [1.54407282E12, 15373.840000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54407288E12, 18109.3], [1.54407276E12, 6391.4], [1.54407294E12, 17802.0], [1.54407282E12, 14242.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407294E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6347.0, "minX": 1000.0, "maxY": 12884.0, "series": [{"data": [[5000.0, 9069.0], [10000.0, 6489.0], [3000.0, 11898.0], [6000.0, 11270.5], [7000.0, 6347.0], [1000.0, 12884.0], [2000.0, 11381.5], [4000.0, 11431.5], [8000.0, 11332.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 10000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6347.0, "minX": 1000.0, "maxY": 12875.0, "series": [{"data": [[5000.0, 9069.0], [10000.0, 6445.0], [3000.0, 11887.0], [6000.0, 11270.5], [7000.0, 6347.0], [1000.0, 12875.0], [2000.0, 11369.5], [4000.0, 11414.5], [8000.0, 11332.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 10000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 27.1, "minX": 1.54407276E12, "maxY": 53.56666666666667, "series": [{"data": [[1.54407288E12, 46.31666666666667], [1.54407276E12, 27.1], [1.54407294E12, 39.68333333333333], [1.54407282E12, 53.56666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407294E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 21.583333333333332, "minX": 1.54407276E12, "maxY": 51.11666666666667, "series": [{"data": [[1.54407288E12, 48.6], [1.54407276E12, 21.583333333333332], [1.54407294E12, 51.11666666666667], [1.54407282E12, 45.36666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407294E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 21.583333333333332, "minX": 1.54407276E12, "maxY": 51.11666666666667, "series": [{"data": [[1.54407288E12, 48.6], [1.54407276E12, 21.583333333333332], [1.54407294E12, 51.11666666666667], [1.54407282E12, 45.36666666666667]], "isOverall": false, "label": "GET Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407294E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 21.583333333333332, "minX": 1.54407276E12, "maxY": 51.11666666666667, "series": [{"data": [[1.54407288E12, 48.6], [1.54407276E12, 21.583333333333332], [1.54407294E12, 51.11666666666667], [1.54407282E12, 45.36666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407294E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

