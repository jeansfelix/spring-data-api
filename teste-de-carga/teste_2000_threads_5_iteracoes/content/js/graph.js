/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 242.0, "minX": 0.0, "maxY": 48881.0, "series": [{"data": [[0.0, 242.0], [0.1, 2012.0], [0.2, 2820.0], [0.3, 3052.0], [0.4, 3642.0], [0.5, 3811.0], [0.6, 4020.0], [0.7, 4288.0], [0.8, 4449.0], [0.9, 4522.0], [1.0, 4581.0], [1.1, 4623.0], [1.2, 4678.0], [1.3, 4723.0], [1.4, 4801.0], [1.5, 4908.0], [1.6, 4978.0], [1.7, 5082.0], [1.8, 5160.0], [1.9, 5295.0], [2.0, 5492.0], [2.1, 6482.0], [2.2, 6947.0], [2.3, 7282.0], [2.4, 7468.0], [2.5, 7621.0], [2.6, 7821.0], [2.7, 7975.0], [2.8, 8049.0], [2.9, 8165.0], [3.0, 8269.0], [3.1, 8364.0], [3.2, 8432.0], [3.3, 8503.0], [3.4, 8571.0], [3.5, 8647.0], [3.6, 8765.0], [3.7, 8841.0], [3.8, 9003.0], [3.9, 9309.0], [4.0, 9455.0], [4.1, 9723.0], [4.2, 10181.0], [4.3, 10445.0], [4.4, 10818.0], [4.5, 11119.0], [4.6, 11376.0], [4.7, 11549.0], [4.8, 11708.0], [4.9, 11941.0], [5.0, 12175.0], [5.1, 12313.0], [5.2, 12481.0], [5.3, 12744.0], [5.4, 13044.0], [5.5, 13273.0], [5.6, 13540.0], [5.7, 13716.0], [5.8, 14139.0], [5.9, 14384.0], [6.0, 14518.0], [6.1, 14723.0], [6.2, 14931.0], [6.3, 15126.0], [6.4, 15305.0], [6.5, 15543.0], [6.6, 15690.0], [6.7, 15907.0], [6.8, 16225.0], [6.9, 16532.0], [7.0, 16750.0], [7.1, 16940.0], [7.2, 17124.0], [7.3, 17308.0], [7.4, 17365.0], [7.5, 17436.0], [7.6, 17492.0], [7.7, 17582.0], [7.8, 17659.0], [7.9, 17735.0], [8.0, 17817.0], [8.1, 17875.0], [8.2, 17970.0], [8.3, 18009.0], [8.4, 18068.0], [8.5, 18158.0], [8.6, 18230.0], [8.7, 18370.0], [8.8, 18640.0], [8.9, 18964.0], [9.0, 19488.0], [9.1, 19796.0], [9.2, 19967.0], [9.3, 20070.0], [9.4, 20134.0], [9.5, 20296.0], [9.6, 20437.0], [9.7, 20496.0], [9.8, 20641.0], [9.9, 20770.0], [10.0, 20936.0], [10.1, 21053.0], [10.2, 21176.0], [10.3, 21235.0], [10.4, 21462.0], [10.5, 21793.0], [10.6, 21900.0], [10.7, 22211.0], [10.8, 22420.0], [10.9, 22596.0], [11.0, 22751.0], [11.1, 22856.0], [11.2, 22924.0], [11.3, 23004.0], [11.4, 23070.0], [11.5, 23107.0], [11.6, 23179.0], [11.7, 23257.0], [11.8, 23288.0], [11.9, 23356.0], [12.0, 23449.0], [12.1, 23541.0], [12.2, 23583.0], [12.3, 23699.0], [12.4, 23786.0], [12.5, 23929.0], [12.6, 24098.0], [12.7, 24308.0], [12.8, 24396.0], [12.9, 24473.0], [13.0, 24545.0], [13.1, 24639.0], [13.2, 24716.0], [13.3, 24831.0], [13.4, 24953.0], [13.5, 25028.0], [13.6, 25154.0], [13.7, 25253.0], [13.8, 25342.0], [13.9, 25412.0], [14.0, 25507.0], [14.1, 25604.0], [14.2, 25681.0], [14.3, 25730.0], [14.4, 25856.0], [14.5, 25934.0], [14.6, 26044.0], [14.7, 26142.0], [14.8, 26221.0], [14.9, 26291.0], [15.0, 26383.0], [15.1, 26464.0], [15.2, 26510.0], [15.3, 26586.0], [15.4, 26654.0], [15.5, 26725.0], [15.6, 26798.0], [15.7, 26853.0], [15.8, 26897.0], [15.9, 26959.0], [16.0, 26994.0], [16.1, 27076.0], [16.2, 27133.0], [16.3, 27158.0], [16.4, 27187.0], [16.5, 27229.0], [16.6, 27308.0], [16.7, 27351.0], [16.8, 27423.0], [16.9, 27541.0], [17.0, 27603.0], [17.1, 27692.0], [17.2, 27838.0], [17.3, 27943.0], [17.4, 28024.0], [17.5, 28091.0], [17.6, 28187.0], [17.7, 28256.0], [17.8, 28320.0], [17.9, 28378.0], [18.0, 28459.0], [18.1, 28506.0], [18.2, 28595.0], [18.3, 28638.0], [18.4, 28729.0], [18.5, 28816.0], [18.6, 28856.0], [18.7, 28935.0], [18.8, 28993.0], [18.9, 29054.0], [19.0, 29092.0], [19.1, 29148.0], [19.2, 29192.0], [19.3, 29235.0], [19.4, 29278.0], [19.5, 29318.0], [19.6, 29360.0], [19.7, 29421.0], [19.8, 29480.0], [19.9, 29526.0], [20.0, 29570.0], [20.1, 29621.0], [20.2, 29672.0], [20.3, 29730.0], [20.4, 29801.0], [20.5, 29861.0], [20.6, 29928.0], [20.7, 29956.0], [20.8, 29992.0], [20.9, 30031.0], [21.0, 30088.0], [21.1, 30134.0], [21.2, 30149.0], [21.3, 30190.0], [21.4, 30217.0], [21.5, 30245.0], [21.6, 30292.0], [21.7, 30334.0], [21.8, 30382.0], [21.9, 30442.0], [22.0, 30502.0], [22.1, 30560.0], [22.2, 30673.0], [22.3, 30699.0], [22.4, 30761.0], [22.5, 30794.0], [22.6, 30883.0], [22.7, 30935.0], [22.8, 31018.0], [22.9, 31121.0], [23.0, 31224.0], [23.1, 31287.0], [23.2, 31341.0], [23.3, 31448.0], [23.4, 31487.0], [23.5, 31512.0], [23.6, 31566.0], [23.7, 31678.0], [23.8, 31737.0], [23.9, 31786.0], [24.0, 31836.0], [24.1, 31882.0], [24.2, 31918.0], [24.3, 31942.0], [24.4, 32001.0], [24.5, 32069.0], [24.6, 32128.0], [24.7, 32169.0], [24.8, 32224.0], [24.9, 32267.0], [25.0, 32331.0], [25.1, 32378.0], [25.2, 32441.0], [25.3, 32476.0], [25.4, 32548.0], [25.5, 32587.0], [25.6, 32646.0], [25.7, 32715.0], [25.8, 32783.0], [25.9, 32817.0], [26.0, 32866.0], [26.1, 32922.0], [26.2, 32960.0], [26.3, 33048.0], [26.4, 33096.0], [26.5, 33163.0], [26.6, 33198.0], [26.7, 33234.0], [26.8, 33315.0], [26.9, 33347.0], [27.0, 33435.0], [27.1, 33489.0], [27.2, 33564.0], [27.3, 33633.0], [27.4, 33706.0], [27.5, 33747.0], [27.6, 33786.0], [27.7, 33808.0], [27.8, 33849.0], [27.9, 33944.0], [28.0, 34017.0], [28.1, 34051.0], [28.2, 34084.0], [28.3, 34115.0], [28.4, 34141.0], [28.5, 34166.0], [28.6, 34217.0], [28.7, 34242.0], [28.8, 34277.0], [28.9, 34302.0], [29.0, 34331.0], [29.1, 34396.0], [29.2, 34443.0], [29.3, 34492.0], [29.4, 34539.0], [29.5, 34594.0], [29.6, 34636.0], [29.7, 34676.0], [29.8, 34732.0], [29.9, 34791.0], [30.0, 34868.0], [30.1, 34921.0], [30.2, 34983.0], [30.3, 35048.0], [30.4, 35097.0], [30.5, 35163.0], [30.6, 35229.0], [30.7, 35329.0], [30.8, 35352.0], [30.9, 35425.0], [31.0, 35515.0], [31.1, 35551.0], [31.2, 35588.0], [31.3, 35609.0], [31.4, 35646.0], [31.5, 35684.0], [31.6, 35724.0], [31.7, 35758.0], [31.8, 35799.0], [31.9, 35842.0], [32.0, 35878.0], [32.1, 35910.0], [32.2, 35935.0], [32.3, 35973.0], [32.4, 36015.0], [32.5, 36059.0], [32.6, 36097.0], [32.7, 36150.0], [32.8, 36201.0], [32.9, 36234.0], [33.0, 36272.0], [33.1, 36320.0], [33.2, 36363.0], [33.3, 36420.0], [33.4, 36475.0], [33.5, 36524.0], [33.6, 36548.0], [33.7, 36594.0], [33.8, 36651.0], [33.9, 36702.0], [34.0, 36798.0], [34.1, 36838.0], [34.2, 36895.0], [34.3, 36967.0], [34.4, 37005.0], [34.5, 37036.0], [34.6, 37077.0], [34.7, 37118.0], [34.8, 37159.0], [34.9, 37184.0], [35.0, 37226.0], [35.1, 37281.0], [35.2, 37327.0], [35.3, 37365.0], [35.4, 37416.0], [35.5, 37462.0], [35.6, 37519.0], [35.7, 37563.0], [35.8, 37608.0], [35.9, 37673.0], [36.0, 37717.0], [36.1, 37770.0], [36.2, 37828.0], [36.3, 37869.0], [36.4, 37967.0], [36.5, 38030.0], [36.6, 38078.0], [36.7, 38126.0], [36.8, 38178.0], [36.9, 38233.0], [37.0, 38270.0], [37.1, 38318.0], [37.2, 38356.0], [37.3, 38408.0], [37.4, 38465.0], [37.5, 38507.0], [37.6, 38549.0], [37.7, 38597.0], [37.8, 38637.0], [37.9, 38668.0], [38.0, 38715.0], [38.1, 38734.0], [38.2, 38777.0], [38.3, 38829.0], [38.4, 38869.0], [38.5, 38895.0], [38.6, 38936.0], [38.7, 38979.0], [38.8, 39010.0], [38.9, 39031.0], [39.0, 39062.0], [39.1, 39091.0], [39.2, 39133.0], [39.3, 39163.0], [39.4, 39193.0], [39.5, 39211.0], [39.6, 39247.0], [39.7, 39307.0], [39.8, 39334.0], [39.9, 39375.0], [40.0, 39396.0], [40.1, 39424.0], [40.2, 39466.0], [40.3, 39499.0], [40.4, 39532.0], [40.5, 39565.0], [40.6, 39592.0], [40.7, 39611.0], [40.8, 39641.0], [40.9, 39672.0], [41.0, 39696.0], [41.1, 39748.0], [41.2, 39782.0], [41.3, 39805.0], [41.4, 39858.0], [41.5, 39884.0], [41.6, 39904.0], [41.7, 39942.0], [41.8, 39995.0], [41.9, 40032.0], [42.0, 40058.0], [42.1, 40083.0], [42.2, 40097.0], [42.3, 40119.0], [42.4, 40145.0], [42.5, 40178.0], [42.6, 40192.0], [42.7, 40210.0], [42.8, 40229.0], [42.9, 40242.0], [43.0, 40259.0], [43.1, 40294.0], [43.2, 40316.0], [43.3, 40343.0], [43.4, 40363.0], [43.5, 40377.0], [43.6, 40390.0], [43.7, 40407.0], [43.8, 40427.0], [43.9, 40445.0], [44.0, 40459.0], [44.1, 40483.0], [44.2, 40501.0], [44.3, 40512.0], [44.4, 40524.0], [44.5, 40540.0], [44.6, 40561.0], [44.7, 40588.0], [44.8, 40598.0], [44.9, 40610.0], [45.0, 40625.0], [45.1, 40634.0], [45.2, 40643.0], [45.3, 40653.0], [45.4, 40660.0], [45.5, 40669.0], [45.6, 40679.0], [45.7, 40692.0], [45.8, 40701.0], [45.9, 40709.0], [46.0, 40723.0], [46.1, 40728.0], [46.2, 40739.0], [46.3, 40748.0], [46.4, 40756.0], [46.5, 40761.0], [46.6, 40769.0], [46.7, 40781.0], [46.8, 40795.0], [46.9, 40799.0], [47.0, 40811.0], [47.1, 40823.0], [47.2, 40833.0], [47.3, 40845.0], [47.4, 40853.0], [47.5, 40865.0], [47.6, 40872.0], [47.7, 40880.0], [47.8, 40890.0], [47.9, 40898.0], [48.0, 40911.0], [48.1, 40918.0], [48.2, 40926.0], [48.3, 40940.0], [48.4, 40949.0], [48.5, 40955.0], [48.6, 40961.0], [48.7, 40975.0], [48.8, 40989.0], [48.9, 40997.0], [49.0, 41004.0], [49.1, 41017.0], [49.2, 41024.0], [49.3, 41040.0], [49.4, 41048.0], [49.5, 41056.0], [49.6, 41068.0], [49.7, 41079.0], [49.8, 41092.0], [49.9, 41104.0], [50.0, 41108.0], [50.1, 41122.0], [50.2, 41130.0], [50.3, 41139.0], [50.4, 41146.0], [50.5, 41155.0], [50.6, 41164.0], [50.7, 41167.0], [50.8, 41173.0], [50.9, 41178.0], [51.0, 41186.0], [51.1, 41198.0], [51.2, 41205.0], [51.3, 41211.0], [51.4, 41218.0], [51.5, 41226.0], [51.6, 41233.0], [51.7, 41237.0], [51.8, 41242.0], [51.9, 41247.0], [52.0, 41255.0], [52.1, 41261.0], [52.2, 41267.0], [52.3, 41273.0], [52.4, 41281.0], [52.5, 41287.0], [52.6, 41292.0], [52.7, 41299.0], [52.8, 41305.0], [52.9, 41314.0], [53.0, 41317.0], [53.1, 41323.0], [53.2, 41329.0], [53.3, 41333.0], [53.4, 41339.0], [53.5, 41343.0], [53.6, 41349.0], [53.7, 41354.0], [53.8, 41364.0], [53.9, 41369.0], [54.0, 41373.0], [54.1, 41382.0], [54.2, 41388.0], [54.3, 41396.0], [54.4, 41401.0], [54.5, 41407.0], [54.6, 41413.0], [54.7, 41418.0], [54.8, 41425.0], [54.9, 41429.0], [55.0, 41434.0], [55.1, 41438.0], [55.2, 41446.0], [55.3, 41450.0], [55.4, 41453.0], [55.5, 41457.0], [55.6, 41465.0], [55.7, 41468.0], [55.8, 41470.0], [55.9, 41475.0], [56.0, 41482.0], [56.1, 41485.0], [56.2, 41492.0], [56.3, 41495.0], [56.4, 41499.0], [56.5, 41503.0], [56.6, 41506.0], [56.7, 41511.0], [56.8, 41518.0], [56.9, 41525.0], [57.0, 41529.0], [57.1, 41535.0], [57.2, 41542.0], [57.3, 41547.0], [57.4, 41554.0], [57.5, 41557.0], [57.6, 41567.0], [57.7, 41574.0], [57.8, 41579.0], [57.9, 41584.0], [58.0, 41590.0], [58.1, 41592.0], [58.2, 41594.0], [58.3, 41600.0], [58.4, 41606.0], [58.5, 41613.0], [58.6, 41621.0], [58.7, 41626.0], [58.8, 41632.0], [58.9, 41635.0], [59.0, 41644.0], [59.1, 41648.0], [59.2, 41652.0], [59.3, 41656.0], [59.4, 41661.0], [59.5, 41665.0], [59.6, 41668.0], [59.7, 41673.0], [59.8, 41678.0], [59.9, 41681.0], [60.0, 41686.0], [60.1, 41690.0], [60.2, 41695.0], [60.3, 41697.0], [60.4, 41702.0], [60.5, 41706.0], [60.6, 41710.0], [60.7, 41714.0], [60.8, 41719.0], [60.9, 41723.0], [61.0, 41728.0], [61.1, 41733.0], [61.2, 41738.0], [61.3, 41742.0], [61.4, 41744.0], [61.5, 41747.0], [61.6, 41753.0], [61.7, 41760.0], [61.8, 41763.0], [61.9, 41767.0], [62.0, 41770.0], [62.1, 41775.0], [62.2, 41779.0], [62.3, 41785.0], [62.4, 41795.0], [62.5, 41800.0], [62.6, 41804.0], [62.7, 41807.0], [62.8, 41810.0], [62.9, 41812.0], [63.0, 41817.0], [63.1, 41822.0], [63.2, 41827.0], [63.3, 41831.0], [63.4, 41835.0], [63.5, 41841.0], [63.6, 41846.0], [63.7, 41851.0], [63.8, 41855.0], [63.9, 41859.0], [64.0, 41863.0], [64.1, 41871.0], [64.2, 41875.0], [64.3, 41880.0], [64.4, 41885.0], [64.5, 41889.0], [64.6, 41893.0], [64.7, 41897.0], [64.8, 41904.0], [64.9, 41909.0], [65.0, 41912.0], [65.1, 41917.0], [65.2, 41923.0], [65.3, 41928.0], [65.4, 41932.0], [65.5, 41938.0], [65.6, 41943.0], [65.7, 41952.0], [65.8, 41956.0], [65.9, 41960.0], [66.0, 41966.0], [66.1, 41969.0], [66.2, 41973.0], [66.3, 41977.0], [66.4, 41982.0], [66.5, 41985.0], [66.6, 41992.0], [66.7, 41996.0], [66.8, 42000.0], [66.9, 42004.0], [67.0, 42008.0], [67.1, 42012.0], [67.2, 42016.0], [67.3, 42022.0], [67.4, 42026.0], [67.5, 42029.0], [67.6, 42034.0], [67.7, 42038.0], [67.8, 42041.0], [67.9, 42048.0], [68.0, 42053.0], [68.1, 42058.0], [68.2, 42061.0], [68.3, 42067.0], [68.4, 42072.0], [68.5, 42077.0], [68.6, 42080.0], [68.7, 42088.0], [68.8, 42091.0], [68.9, 42094.0], [69.0, 42098.0], [69.1, 42101.0], [69.2, 42106.0], [69.3, 42113.0], [69.4, 42115.0], [69.5, 42121.0], [69.6, 42126.0], [69.7, 42130.0], [69.8, 42136.0], [69.9, 42142.0], [70.0, 42147.0], [70.1, 42153.0], [70.2, 42157.0], [70.3, 42159.0], [70.4, 42167.0], [70.5, 42176.0], [70.6, 42180.0], [70.7, 42183.0], [70.8, 42187.0], [70.9, 42191.0], [71.0, 42197.0], [71.1, 42204.0], [71.2, 42209.0], [71.3, 42214.0], [71.4, 42218.0], [71.5, 42223.0], [71.6, 42228.0], [71.7, 42233.0], [71.8, 42236.0], [71.9, 42240.0], [72.0, 42242.0], [72.1, 42246.0], [72.2, 42250.0], [72.3, 42255.0], [72.4, 42261.0], [72.5, 42265.0], [72.6, 42271.0], [72.7, 42274.0], [72.8, 42278.0], [72.9, 42281.0], [73.0, 42288.0], [73.1, 42293.0], [73.2, 42298.0], [73.3, 42306.0], [73.4, 42309.0], [73.5, 42313.0], [73.6, 42317.0], [73.7, 42322.0], [73.8, 42330.0], [73.9, 42334.0], [74.0, 42338.0], [74.1, 42341.0], [74.2, 42348.0], [74.3, 42354.0], [74.4, 42360.0], [74.5, 42366.0], [74.6, 42372.0], [74.7, 42376.0], [74.8, 42380.0], [74.9, 42384.0], [75.0, 42391.0], [75.1, 42397.0], [75.2, 42401.0], [75.3, 42408.0], [75.4, 42414.0], [75.5, 42421.0], [75.6, 42426.0], [75.7, 42430.0], [75.8, 42436.0], [75.9, 42442.0], [76.0, 42448.0], [76.1, 42451.0], [76.2, 42455.0], [76.3, 42460.0], [76.4, 42462.0], [76.5, 42466.0], [76.6, 42469.0], [76.7, 42475.0], [76.8, 42480.0], [76.9, 42486.0], [77.0, 42492.0], [77.1, 42499.0], [77.2, 42504.0], [77.3, 42513.0], [77.4, 42517.0], [77.5, 42526.0], [77.6, 42532.0], [77.7, 42536.0], [77.8, 42540.0], [77.9, 42542.0], [78.0, 42547.0], [78.1, 42549.0], [78.2, 42554.0], [78.3, 42559.0], [78.4, 42566.0], [78.5, 42569.0], [78.6, 42574.0], [78.7, 42580.0], [78.8, 42584.0], [78.9, 42588.0], [79.0, 42594.0], [79.1, 42597.0], [79.2, 42603.0], [79.3, 42610.0], [79.4, 42615.0], [79.5, 42620.0], [79.6, 42625.0], [79.7, 42631.0], [79.8, 42634.0], [79.9, 42638.0], [80.0, 42644.0], [80.1, 42648.0], [80.2, 42653.0], [80.3, 42660.0], [80.4, 42664.0], [80.5, 42669.0], [80.6, 42674.0], [80.7, 42678.0], [80.8, 42683.0], [80.9, 42690.0], [81.0, 42694.0], [81.1, 42703.0], [81.2, 42708.0], [81.3, 42711.0], [81.4, 42715.0], [81.5, 42721.0], [81.6, 42729.0], [81.7, 42735.0], [81.8, 42740.0], [81.9, 42746.0], [82.0, 42749.0], [82.1, 42756.0], [82.2, 42760.0], [82.3, 42765.0], [82.4, 42772.0], [82.5, 42776.0], [82.6, 42782.0], [82.7, 42787.0], [82.8, 42793.0], [82.9, 42799.0], [83.0, 42805.0], [83.1, 42808.0], [83.2, 42812.0], [83.3, 42818.0], [83.4, 42826.0], [83.5, 42834.0], [83.6, 42840.0], [83.7, 42844.0], [83.8, 42849.0], [83.9, 42854.0], [84.0, 42860.0], [84.1, 42865.0], [84.2, 42871.0], [84.3, 42877.0], [84.4, 42884.0], [84.5, 42892.0], [84.6, 42901.0], [84.7, 42907.0], [84.8, 42914.0], [84.9, 42920.0], [85.0, 42927.0], [85.1, 42933.0], [85.2, 42936.0], [85.3, 42945.0], [85.4, 42950.0], [85.5, 42962.0], [85.6, 42968.0], [85.7, 42972.0], [85.8, 42982.0], [85.9, 42987.0], [86.0, 42994.0], [86.1, 42998.0], [86.2, 43006.0], [86.3, 43019.0], [86.4, 43025.0], [86.5, 43033.0], [86.6, 43038.0], [86.7, 43046.0], [86.8, 43054.0], [86.9, 43063.0], [87.0, 43071.0], [87.1, 43077.0], [87.2, 43084.0], [87.3, 43089.0], [87.4, 43095.0], [87.5, 43102.0], [87.6, 43113.0], [87.7, 43118.0], [87.8, 43125.0], [87.9, 43132.0], [88.0, 43143.0], [88.1, 43152.0], [88.2, 43159.0], [88.3, 43168.0], [88.4, 43175.0], [88.5, 43179.0], [88.6, 43188.0], [88.7, 43197.0], [88.8, 43202.0], [88.9, 43210.0], [89.0, 43215.0], [89.1, 43222.0], [89.2, 43228.0], [89.3, 43236.0], [89.4, 43242.0], [89.5, 43250.0], [89.6, 43257.0], [89.7, 43264.0], [89.8, 43274.0], [89.9, 43282.0], [90.0, 43293.0], [90.1, 43305.0], [90.2, 43314.0], [90.3, 43321.0], [90.4, 43328.0], [90.5, 43343.0], [90.6, 43353.0], [90.7, 43360.0], [90.8, 43367.0], [90.9, 43376.0], [91.0, 43382.0], [91.1, 43389.0], [91.2, 43400.0], [91.3, 43408.0], [91.4, 43414.0], [91.5, 43425.0], [91.6, 43432.0], [91.7, 43441.0], [91.8, 43449.0], [91.9, 43458.0], [92.0, 43468.0], [92.1, 43477.0], [92.2, 43487.0], [92.3, 43499.0], [92.4, 43504.0], [92.5, 43518.0], [92.6, 43528.0], [92.7, 43540.0], [92.8, 43554.0], [92.9, 43562.0], [93.0, 43574.0], [93.1, 43585.0], [93.2, 43597.0], [93.3, 43606.0], [93.4, 43617.0], [93.5, 43630.0], [93.6, 43647.0], [93.7, 43662.0], [93.8, 43677.0], [93.9, 43704.0], [94.0, 43716.0], [94.1, 43724.0], [94.2, 43741.0], [94.3, 43754.0], [94.4, 43763.0], [94.5, 43787.0], [94.6, 43800.0], [94.7, 43813.0], [94.8, 43840.0], [94.9, 43845.0], [95.0, 43860.0], [95.1, 43879.0], [95.2, 43892.0], [95.3, 43907.0], [95.4, 43924.0], [95.5, 43947.0], [95.6, 43958.0], [95.7, 43978.0], [95.8, 44008.0], [95.9, 44015.0], [96.0, 44047.0], [96.1, 44067.0], [96.2, 44089.0], [96.3, 44115.0], [96.4, 44140.0], [96.5, 44161.0], [96.6, 44191.0], [96.7, 44204.0], [96.8, 44228.0], [96.9, 44255.0], [97.0, 44284.0], [97.1, 44299.0], [97.2, 44330.0], [97.3, 44345.0], [97.4, 44371.0], [97.5, 44406.0], [97.6, 44448.0], [97.7, 44492.0], [97.8, 44522.0], [97.9, 44554.0], [98.0, 44575.0], [98.1, 44613.0], [98.2, 44643.0], [98.3, 44673.0], [98.4, 44753.0], [98.5, 44804.0], [98.6, 44843.0], [98.7, 44909.0], [98.8, 44959.0], [98.9, 45005.0], [99.0, 45094.0], [99.1, 45204.0], [99.2, 45295.0], [99.3, 45374.0], [99.4, 45476.0], [99.5, 45625.0], [99.6, 45832.0], [99.7, 46151.0], [99.8, 46548.0], [99.9, 47412.0], [100.0, 48881.0]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 225.0, "series": [{"data": [[33700.0, 27.0], [32900.0, 17.0], [34500.0, 21.0], [35300.0, 19.0], [36100.0, 19.0], [36900.0, 18.0], [37700.0, 20.0], [38500.0, 22.0], [39300.0, 32.0], [40900.0, 105.0], [40100.0, 43.0], [41700.0, 214.0], [42500.0, 201.0], [43300.0, 111.0], [44900.0, 18.0], [44100.0, 43.0], [45700.0, 4.0], [46500.0, 3.0], [48100.0, 1.0], [47300.0, 1.0], [200.0, 2.0], [300.0, 1.0], [400.0, 2.0], [600.0, 2.0], [800.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 2.0], [2100.0, 1.0], [2300.0, 1.0], [2400.0, 2.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 5.0], [2900.0, 5.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 2.0], [3400.0, 3.0], [3600.0, 6.0], [3700.0, 4.0], [3800.0, 7.0], [3900.0, 3.0], [4000.0, 3.0], [4100.0, 4.0], [4300.0, 5.0], [4200.0, 5.0], [4600.0, 18.0], [4500.0, 20.0], [4400.0, 11.0], [4700.0, 15.0], [4800.0, 9.0], [4900.0, 14.0], [5000.0, 11.0], [5100.0, 10.0], [5200.0, 7.0], [5300.0, 3.0], [5400.0, 7.0], [5600.0, 2.0], [5700.0, 2.0], [5800.0, 2.0], [6100.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 2.0], [6600.0, 2.0], [6400.0, 1.0], [6900.0, 3.0], [6800.0, 3.0], [6700.0, 1.0], [7100.0, 5.0], [7000.0, 2.0], [7200.0, 4.0], [7300.0, 4.0], [7400.0, 6.0], [7600.0, 4.0], [7500.0, 6.0], [7700.0, 6.0], [7900.0, 8.0], [7800.0, 6.0], [8000.0, 12.0], [8100.0, 7.0], [8200.0, 15.0], [8400.0, 15.0], [8600.0, 8.0], [8800.0, 9.0], [9200.0, 3.0], [9000.0, 2.0], [9400.0, 7.0], [9600.0, 6.0], [9800.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10400.0, 7.0], [10600.0, 2.0], [11000.0, 3.0], [11200.0, 2.0], [10800.0, 4.0], [11400.0, 6.0], [11600.0, 9.0], [12000.0, 4.0], [12200.0, 3.0], [11800.0, 4.0], [12400.0, 8.0], [12600.0, 4.0], [12800.0, 7.0], [13200.0, 5.0], [13000.0, 6.0], [13400.0, 5.0], [13600.0, 5.0], [13800.0, 1.0], [14200.0, 3.0], [14000.0, 1.0], [14400.0, 8.0], [14600.0, 4.0], [14800.0, 5.0], [15000.0, 3.0], [15200.0, 4.0], [15600.0, 5.0], [15800.0, 8.0], [15400.0, 5.0], [16000.0, 3.0], [16200.0, 4.0], [16400.0, 4.0], [16800.0, 6.0], [17200.0, 4.0], [17600.0, 13.0], [18400.0, 6.0], [18000.0, 14.0], [18800.0, 4.0], [19200.0, 1.0], [19600.0, 3.0], [20000.0, 12.0], [20400.0, 15.0], [21200.0, 7.0], [20800.0, 3.0], [21600.0, 2.0], [22000.0, 3.0], [22400.0, 7.0], [22800.0, 12.0], [23200.0, 19.0], [24000.0, 9.0], [23600.0, 9.0], [24400.0, 13.0], [25200.0, 9.0], [24800.0, 10.0], [25600.0, 17.0], [26000.0, 7.0], [26400.0, 15.0], [26800.0, 19.0], [27600.0, 11.0], [27200.0, 15.0], [28000.0, 15.0], [28400.0, 15.0], [28800.0, 16.0], [29200.0, 23.0], [29600.0, 20.0], [30000.0, 20.0], [30400.0, 17.0], [30800.0, 12.0], [31200.0, 17.0], [31600.0, 7.0], [32400.0, 21.0], [32000.0, 15.0], [32800.0, 25.0], [34400.0, 19.0], [33600.0, 11.0], [35200.0, 9.0], [36000.0, 27.0], [36800.0, 19.0], [38400.0, 21.0], [37600.0, 19.0], [39200.0, 26.0], [40000.0, 39.0], [40800.0, 100.0], [41600.0, 206.0], [42400.0, 194.0], [43200.0, 129.0], [44800.0, 21.0], [44000.0, 46.0], [46400.0, 2.0], [45600.0, 5.0], [48800.0, 2.0], [47200.0, 1.0], [33100.0, 20.0], [33900.0, 12.0], [34700.0, 16.0], [35500.0, 28.0], [36300.0, 18.0], [37100.0, 29.0], [37900.0, 12.0], [38700.0, 31.0], [39500.0, 33.0], [40300.0, 54.0], [41100.0, 128.0], [42700.0, 187.0], [41900.0, 206.0], [43500.0, 93.0], [44300.0, 38.0], [45900.0, 7.0], [45100.0, 7.0], [16500.0, 4.0], [17300.0, 15.0], [16900.0, 3.0], [18100.0, 13.0], [17700.0, 12.0], [19300.0, 2.0], [18900.0, 2.0], [18500.0, 1.0], [19700.0, 6.0], [20100.0, 12.0], [20500.0, 7.0], [20900.0, 7.0], [21300.0, 3.0], [21700.0, 4.0], [22100.0, 3.0], [22500.0, 5.0], [22900.0, 13.0], [23300.0, 12.0], [23700.0, 11.0], [24100.0, 4.0], [24500.0, 14.0], [25300.0, 13.0], [24900.0, 9.0], [26100.0, 12.0], [25700.0, 8.0], [26500.0, 16.0], [27300.0, 22.0], [26900.0, 20.0], [28100.0, 10.0], [28500.0, 16.0], [27700.0, 6.0], [28900.0, 20.0], [29300.0, 22.0], [30100.0, 31.0], [30500.0, 15.0], [29700.0, 11.0], [31300.0, 9.0], [30900.0, 15.0], [31700.0, 22.0], [32500.0, 21.0], [32100.0, 21.0], [33000.0, 16.0], [33800.0, 19.0], [34600.0, 23.0], [35400.0, 11.0], [36200.0, 26.0], [37000.0, 26.0], [37800.0, 18.0], [38600.0, 25.0], [39400.0, 29.0], [40200.0, 51.0], [41800.0, 225.0], [42600.0, 193.0], [41000.0, 89.0], [44200.0, 44.0], [43400.0, 113.0], [45000.0, 14.0], [45800.0, 3.0], [46600.0, 2.0], [47400.0, 3.0], [48200.0, 1.0], [33300.0, 18.0], [34100.0, 35.0], [34900.0, 18.0], [35700.0, 27.0], [36500.0, 27.0], [37300.0, 21.0], [38100.0, 23.0], [38900.0, 26.0], [39700.0, 26.0], [40500.0, 63.0], [41300.0, 164.0], [42100.0, 198.0], [42900.0, 154.0], [44500.0, 36.0], [43700.0, 72.0], [45300.0, 10.0], [46100.0, 5.0], [46900.0, 1.0], [8500.0, 14.0], [8300.0, 8.0], [8700.0, 12.0], [8900.0, 7.0], [9100.0, 5.0], [9700.0, 4.0], [9300.0, 6.0], [9900.0, 2.0], [10100.0, 3.0], [10300.0, 6.0], [10500.0, 2.0], [10700.0, 1.0], [10900.0, 3.0], [11100.0, 4.0], [11300.0, 6.0], [11700.0, 6.0], [11500.0, 3.0], [12100.0, 6.0], [11900.0, 4.0], [12500.0, 5.0], [12300.0, 6.0], [12700.0, 1.0], [12900.0, 1.0], [13100.0, 3.0], [13300.0, 1.0], [13700.0, 6.0], [13500.0, 4.0], [14100.0, 4.0], [14300.0, 6.0], [13900.0, 3.0], [14700.0, 7.0], [14500.0, 3.0], [14900.0, 6.0], [15300.0, 6.0], [15100.0, 7.0], [15700.0, 1.0], [15500.0, 6.0], [15900.0, 4.0], [16100.0, 2.0], [16300.0, 2.0], [16600.0, 6.0], [17000.0, 7.0], [17400.0, 17.0], [18200.0, 10.0], [17800.0, 15.0], [18600.0, 3.0], [19000.0, 3.0], [19400.0, 3.0], [19800.0, 7.0], [20200.0, 3.0], [20600.0, 9.0], [21000.0, 13.0], [21400.0, 6.0], [21800.0, 9.0], [22200.0, 4.0], [22600.0, 7.0], [23000.0, 14.0], [23400.0, 11.0], [23800.0, 7.0], [24200.0, 5.0], [24600.0, 11.0], [25000.0, 9.0], [25400.0, 13.0], [25800.0, 11.0], [26200.0, 13.0], [26600.0, 15.0], [27000.0, 12.0], [27400.0, 7.0], [27800.0, 11.0], [28200.0, 14.0], [28600.0, 12.0], [29000.0, 17.0], [29400.0, 16.0], [30200.0, 28.0], [30600.0, 17.0], [29800.0, 17.0], [31400.0, 19.0], [31000.0, 11.0], [31800.0, 20.0], [32600.0, 15.0], [32200.0, 18.0], [33200.0, 16.0], [34000.0, 25.0], [34800.0, 15.0], [35600.0, 29.0], [36400.0, 21.0], [37200.0, 20.0], [38000.0, 17.0], [38800.0, 23.0], [39600.0, 37.0], [40400.0, 51.0], [41200.0, 158.0], [42000.0, 224.0], [42800.0, 166.0], [44400.0, 23.0], [43600.0, 63.0], [46800.0, 2.0], [45200.0, 13.0], [46000.0, 1.0], [47600.0, 2.0], [33500.0, 15.0], [34300.0, 24.0], [35100.0, 17.0], [35900.0, 29.0], [36700.0, 15.0], [37500.0, 22.0], [38300.0, 22.0], [39100.0, 31.0], [39900.0, 25.0], [40700.0, 112.0], [41500.0, 187.0], [42300.0, 195.0], [43900.0, 51.0], [44700.0, 15.0], [43100.0, 134.0], [45500.0, 5.0], [16700.0, 4.0], [17100.0, 6.0], [17500.0, 12.0], [17900.0, 17.0], [18300.0, 5.0], [18700.0, 3.0], [19100.0, 1.0], [19500.0, 1.0], [19900.0, 6.0], [20300.0, 6.0], [20700.0, 6.0], [21100.0, 9.0], [21500.0, 3.0], [22300.0, 6.0], [21900.0, 3.0], [22700.0, 7.0], [23100.0, 20.0], [23500.0, 16.0], [24300.0, 11.0], [23900.0, 3.0], [25500.0, 9.0], [24700.0, 8.0], [25100.0, 10.0], [26300.0, 11.0], [25900.0, 14.0], [26700.0, 14.0], [27100.0, 30.0], [27500.0, 13.0], [27900.0, 9.0], [28300.0, 17.0], [28700.0, 12.0], [29100.0, 20.0], [29500.0, 26.0], [29900.0, 26.0], [30300.0, 20.0], [30700.0, 20.0], [31100.0, 9.0], [31500.0, 22.0], [31900.0, 26.0], [32300.0, 18.0], [32700.0, 14.0], [33400.0, 19.0], [34200.0, 30.0], [35000.0, 17.0], [36600.0, 16.0], [35800.0, 24.0], [37400.0, 19.0], [38200.0, 21.0], [39000.0, 36.0], [39800.0, 30.0], [40600.0, 96.0], [41400.0, 207.0], [42200.0, 220.0], [43000.0, 133.0], [43800.0, 67.0], [44600.0, 26.0], [47000.0, 1.0], [45400.0, 12.0], [46200.0, 3.0], [47800.0, 2.0]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9992.0, "series": [{"data": [[0.0, 5.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9992.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 464.06256742179056, "minX": 1.54407468E12, "maxY": 1996.1032303370798, "series": [{"data": [[1.54407492E12, 464.06256742179056], [1.54407474E12, 1996.1032303370798], [1.54407486E12, 1666.8887751620557], [1.54407468E12, 1079.4691075514872], [1.5440748E12, 1995.3475673783653]], "isOverall": false, "label": "GET_ENTIDADES", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407492E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 636.0, "minX": 1.0, "maxY": 45150.0, "series": [{"data": [[2.0, 25018.0], [4.0, 24853.0], [5.0, 24712.0], [6.0, 24671.0], [7.0, 25120.0], [9.0, 25168.5], [10.0, 24644.0], [13.0, 25301.0], [14.0, 25333.0], [15.0, 24670.0], [16.0, 25045.0], [18.0, 25814.0], [19.0, 24545.0], [21.0, 25712.5], [22.0, 25154.0], [24.0, 26129.5], [25.0, 12384.5], [27.0, 23925.0], [28.0, 12093.5], [30.0, 23800.0], [31.0, 24529.0], [33.0, 23908.0], [32.0, 24477.0], [35.0, 25896.0], [34.0, 24607.0], [37.0, 24572.0], [38.0, 24491.0], [41.0, 27039.0], [40.0, 23078.5], [43.0, 23583.0], [42.0, 23273.0], [44.0, 26677.0], [47.0, 23554.0], [46.0, 26245.0], [49.0, 24396.0], [48.0, 24474.0], [50.0, 25968.0], [53.0, 25910.0], [52.0, 24704.5], [55.0, 26571.0], [54.0, 24940.0], [56.0, 24451.0], [58.0, 17497.333333333332], [59.0, 26193.0], [60.0, 26965.0], [63.0, 20058.0], [67.0, 25263.0], [65.0, 26448.0], [64.0, 26871.0], [71.0, 23699.0], [70.0, 24423.0], [69.0, 25792.0], [68.0, 26159.0], [74.0, 12802.0], [75.0, 26960.0], [73.0, 27149.0], [72.0, 26876.0], [79.0, 26109.0], [78.0, 27165.0], [77.0, 26882.0], [76.0, 26048.0], [82.0, 27187.0], [81.0, 27076.0], [80.0, 25414.0], [87.0, 27147.5], [85.0, 27244.0], [84.0, 26789.0], [91.0, 25487.0], [90.0, 27348.0], [89.0, 27368.0], [88.0, 26798.0], [95.0, 27319.0], [94.0, 27301.0], [93.0, 27203.0], [92.0, 27205.0], [99.0, 27227.0], [98.0, 26475.0], [97.0, 25934.0], [96.0, 25982.0], [101.0, 636.0], [103.0, 26855.0], [102.0, 26774.5], [100.0, 26377.0], [107.0, 13708.5], [106.0, 26464.0], [105.0, 27248.0], [104.0, 27132.0], [111.0, 14050.0], [110.0, 27132.0], [109.0, 26840.0], [108.0, 27177.0], [115.0, 27017.0], [114.0, 26778.0], [113.0, 26991.0], [112.0, 26755.0], [119.0, 27135.0], [118.0, 27173.0], [117.0, 27118.0], [116.0, 26959.0], [123.0, 27139.0], [122.0, 27133.0], [121.0, 26971.0], [120.0, 31909.0], [127.0, 26992.0], [126.0, 27098.0], [125.0, 27052.5], [135.0, 30869.0], [134.0, 26962.0], [133.0, 26891.0], [132.0, 26959.0], [131.0, 26955.0], [130.0, 26887.0], [129.0, 26902.0], [128.0, 26994.0], [143.0, 26838.0], [142.0, 26792.0], [141.0, 26814.0], [140.0, 26897.0], [139.0, 27513.0], [138.0, 26914.0], [137.0, 27899.0], [136.0, 26837.0], [151.0, 26664.0], [150.0, 27351.0], [149.0, 27567.0], [148.0, 27423.0], [147.0, 26805.0], [146.0, 26718.0], [145.0, 27997.0], [144.0, 26858.0], [159.0, 28784.0], [158.0, 28094.0], [157.0, 28256.0], [156.0, 27368.0], [155.0, 26600.0], [154.0, 26648.0], [153.0, 27638.0], [152.0, 27373.0], [167.0, 28372.0], [166.0, 27838.0], [165.0, 28416.0], [164.0, 28584.0], [163.0, 26460.0], [162.0, 28320.0], [161.0, 27648.0], [160.0, 27308.0], [175.0, 29067.0], [174.0, 29065.0], [173.0, 28148.0], [172.0, 27306.0], [171.0, 27159.0], [170.0, 28410.0], [168.0, 28064.0], [183.0, 28852.0], [182.0, 27367.0], [181.0, 28445.5], [179.0, 28101.0], [178.0, 28362.0], [177.0, 27367.0], [176.0, 28257.0], [191.0, 28143.0], [190.0, 28916.0], [189.0, 28249.0], [188.0, 28283.0], [187.0, 28372.0], [186.0, 29672.0], [185.0, 28512.0], [184.0, 27282.0], [199.0, 28916.0], [198.0, 28025.0], [197.0, 29674.0], [196.0, 28202.0], [195.0, 28434.0], [194.0, 28155.0], [193.0, 28432.0], [192.0, 27023.0], [207.0, 29116.0], [206.0, 27159.0], [205.0, 29676.0], [204.0, 29189.0], [203.0, 30048.0], [202.0, 28521.0], [201.0, 29400.0], [200.0, 27889.0], [215.0, 27686.0], [214.0, 29848.0], [213.0, 29192.0], [212.0, 29598.0], [211.0, 29556.0], [210.0, 29371.0], [209.0, 28016.0], [208.0, 28816.0], [223.0, 28185.0], [222.0, 29209.0], [221.0, 28965.0], [220.0, 29744.0], [219.0, 28213.0], [218.0, 29707.0], [217.0, 28662.0], [216.0, 29570.0], [231.0, 29032.0], [230.0, 28777.0], [229.0, 28412.0], [228.0, 28638.0], [227.0, 28740.0], [226.0, 28610.0], [225.0, 28986.0], [224.0, 29079.0], [239.0, 29450.0], [238.0, 29536.0], [237.0, 29047.0], [235.0, 29827.0], [234.0, 29134.0], [233.0, 29278.0], [232.0, 29881.0], [247.0, 29663.0], [246.0, 29483.0], [245.0, 29385.0], [244.0, 29153.0], [243.0, 29243.0], [242.0, 29697.0], [241.0, 29763.0], [240.0, 27897.0], [255.0, 29235.0], [254.0, 29334.0], [253.0, 29541.0], [252.0, 29257.0], [251.0, 29183.0], [250.0, 29480.0], [249.0, 29685.0], [248.0, 29424.0], [270.0, 29250.0], [271.0, 30073.0], [269.0, 29246.0], [268.0, 29304.0], [267.0, 29332.0], [266.0, 29148.0], [265.0, 29298.0], [264.0, 29470.0], [262.0, 29270.0], [257.0, 29193.0], [256.0, 29307.0], [259.0, 29106.0], [258.0, 29996.0], [261.0, 29034.0], [260.0, 29782.0], [286.0, 29621.0], [287.0, 16098.0], [285.0, 28947.0], [284.0, 29552.0], [283.0, 28975.0], [282.0, 28995.0], [281.0, 29512.0], [280.0, 30500.0], [279.0, 28973.0], [272.0, 30205.0], [275.0, 29108.0], [274.0, 29855.0], [278.0, 29054.0], [277.0, 29106.0], [276.0, 29092.0], [302.0, 30102.0], [303.0, 30243.0], [301.0, 29321.0], [300.0, 29302.0], [299.0, 29767.0], [298.0, 30145.0], [297.0, 23458.0], [296.0, 30202.0], [294.0, 29991.0], [289.0, 30217.0], [288.0, 24065.0], [291.0, 29644.0], [290.0, 28853.0], [293.0, 29960.0], [292.0, 28822.0], [318.0, 11405.666666666666], [309.0, 15999.0], [308.0, 29325.0], [311.0, 29391.0], [305.0, 30088.0], [304.0, 29493.0], [307.0, 29250.0], [306.0, 30690.0], [310.0, 29513.0], [319.0, 24098.0], [317.0, 29317.0], [316.0, 29476.0], [315.0, 24257.0], [314.0, 30101.0], [313.0, 29861.0], [312.0, 29533.0], [334.0, 29949.0], [335.0, 30404.0], [333.0, 29987.0], [332.0, 30007.0], [331.0, 29956.0], [330.0, 30134.0], [329.0, 30263.0], [328.0, 23849.0], [327.0, 30163.0], [321.0, 29926.0], [320.0, 30433.0], [323.0, 30306.0], [322.0, 29928.0], [326.0, 29888.0], [325.0, 30177.0], [324.0, 29956.0], [350.0, 30238.0], [342.0, 15928.0], [341.0, 29880.0], [340.0, 29801.0], [343.0, 29868.0], [337.0, 29909.0], [336.0, 29567.0], [339.0, 30435.0], [338.0, 29453.0], [351.0, 29592.0], [349.0, 25949.0], [348.0, 29736.0], [347.0, 24775.0], [346.0, 29811.0], [345.0, 30405.0], [344.0, 24435.0], [366.0, 29847.0], [365.0, 16362.0], [367.0, 30193.0], [364.0, 30011.0], [363.0, 30354.0], [362.0, 30051.0], [361.0, 30161.0], [360.0, 30155.0], [359.0, 31120.0], [353.0, 30021.0], [352.0, 30206.0], [355.0, 30201.0], [354.0, 29524.0], [358.0, 30063.0], [357.0, 30405.0], [356.0, 30336.0], [381.0, 30303.0], [383.0, 30787.0], [376.0, 16634.5], [382.0, 30265.0], [380.0, 30691.0], [371.0, 29989.5], [369.0, 29850.0], [368.0, 30225.0], [379.0, 30052.5], [377.0, 29938.0], [375.0, 30803.0], [374.0, 30053.0], [373.0, 30245.0], [372.0, 27065.0], [398.0, 29996.5], [388.0, 12060.333333333334], [390.0, 31057.0], [389.0, 30055.0], [399.0, 30873.0], [397.0, 30267.0], [387.0, 30512.0], [386.0, 30506.0], [385.0, 30172.5], [395.0, 30236.0], [394.0, 30230.0], [393.0, 32401.0], [392.0, 31002.0], [391.0, 29528.0], [414.0, 31230.0], [413.0, 30824.0], [403.0, 29995.0], [402.0, 30291.0], [401.0, 30340.0], [400.0, 30862.0], [411.0, 30141.0], [410.0, 30883.0], [409.0, 31234.0], [408.0, 30516.0], [407.0, 30536.0], [406.0, 31566.0], [405.0, 31287.0], [404.0, 30020.0], [430.0, 31144.0], [420.0, 9630.0], [421.0, 30613.0], [423.0, 31568.0], [417.0, 30762.0], [416.0, 30166.0], [419.0, 30460.0], [418.0, 26560.0], [422.0, 30199.0], [431.0, 32205.0], [429.0, 30696.0], [428.0, 30786.0], [427.0, 30733.0], [426.0, 32227.0], [425.0, 31299.0], [424.0, 30380.0], [447.0, 30761.0], [441.0, 17361.0], [446.0, 30962.0], [445.0, 30882.0], [444.0, 31229.0], [435.0, 31226.0], [434.0, 29643.0], [433.0, 30134.0], [432.0, 30145.0], [443.0, 30998.0], [442.0, 30598.0], [440.0, 30668.0], [439.0, 30769.0], [438.0, 30717.0], [437.0, 31916.0], [436.0, 31487.0], [462.0, 31448.0], [460.0, 16391.5], [463.0, 17219.5], [461.0, 30585.0], [459.0, 30560.0], [458.0, 32128.0], [457.0, 30479.0], [456.0, 30689.0], [455.0, 32168.0], [449.0, 30243.0], [448.0, 32159.0], [451.0, 31126.0], [450.0, 31762.0], [454.0, 31932.0], [453.0, 26144.0], [452.0, 31675.0], [478.0, 32072.0], [471.0, 17403.0], [465.0, 31511.0], [464.0, 30545.0], [467.0, 31916.0], [466.0, 32009.0], [479.0, 32366.0], [477.0, 31097.0], [476.0, 31947.0], [474.0, 32434.0], [473.0, 31379.0], [472.0, 31669.0], [470.0, 30427.0], [469.0, 31896.0], [468.0, 31506.0], [494.0, 30991.0], [480.0, 3079.0], [481.0, 32049.0], [483.0, 31554.0], [482.0, 32476.0], [495.0, 16903.0], [493.0, 31092.0], [492.0, 32296.0], [490.0, 31449.0], [489.0, 31940.0], [488.0, 32107.0], [487.0, 32043.0], [486.0, 32400.0], [485.0, 32084.0], [484.0, 32418.0], [510.0, 31922.5], [497.0, 18030.0], [496.0, 31275.0], [498.0, 32162.0], [503.0, 31923.0], [502.0, 32071.0], [501.0, 31936.0], [500.0, 31780.0], [499.0, 10316.5], [511.0, 31770.0], [508.0, 31905.0], [507.0, 31928.0], [506.0, 33057.0], [505.0, 31975.0], [504.0, 26563.0], [512.0, 12923.666666666666], [540.0, 33422.0], [526.0, 31501.0], [524.0, 34102.0], [522.0, 31788.0], [520.0, 31577.0], [514.0, 10815.75], [528.0, 34681.0], [530.0, 31710.0], [532.0, 32448.0], [534.0, 32869.0], [542.0, 31761.0], [538.0, 32832.0], [536.0, 32033.0], [518.0, 31851.0], [516.0, 32411.0], [544.0, 31836.0], [550.0, 31703.0], [548.0, 32480.0], [546.0, 32365.0], [558.0, 31786.0], [568.0, 33396.0], [554.0, 9537.6], [552.0, 31882.0], [556.0, 33716.0], [566.0, 10453.75], [564.0, 33826.0], [570.0, 31922.0], [572.0, 34388.0], [560.0, 31451.0], [562.0, 31724.0], [574.0, 33697.0], [602.0, 32764.0], [606.0, 33102.0], [586.0, 34080.0], [584.0, 32129.0], [588.0, 32626.0], [576.0, 32435.0], [590.0, 31516.0], [594.0, 11089.25], [596.0, 31926.0], [598.0, 33036.0], [600.0, 33035.0], [582.0, 31864.0], [580.0, 31780.0], [578.0, 32227.5], [592.0, 33163.0], [604.0, 33980.0], [610.0, 14005.0], [636.0, 31526.0], [608.0, 34184.0], [612.0, 33499.0], [614.0, 32114.0], [620.0, 34562.0], [618.0, 33784.0], [616.0, 34983.0], [624.0, 31076.0], [626.0, 32526.0], [628.0, 32972.0], [630.0, 31037.0], [638.0, 32922.0], [634.0, 32808.0], [632.0, 33435.0], [668.0, 33429.0], [656.0, 33719.0], [658.0, 33604.0], [660.0, 34117.0], [670.0, 32828.0], [666.0, 33155.0], [664.0, 33313.0], [640.0, 33797.0], [642.0, 34259.0], [644.0, 32964.0], [646.0, 26111.0], [654.0, 33441.0], [652.0, 33612.0], [650.0, 33336.0], [648.0, 34121.0], [662.0, 33343.0], [674.0, 34238.0], [700.0, 11887.0], [682.0, 19145.5], [680.0, 34646.0], [684.0, 34917.0], [678.0, 37517.0], [676.0, 34205.0], [672.0, 33391.0], [686.0, 33198.0], [696.0, 34286.0], [692.0, 10387.2], [690.0, 34553.0], [688.0, 34594.0], [694.0, 35726.0], [702.0, 33819.0], [698.0, 34170.0], [706.0, 34993.0], [728.0, 8698.0], [734.0, 8446.5], [704.0, 34708.0], [708.0, 34791.0], [710.0, 34637.0], [718.0, 34365.0], [716.0, 35348.0], [714.0, 36006.0], [712.0, 35408.0], [726.0, 32726.0], [720.0, 35253.0], [722.0, 34989.0], [724.0, 34055.0], [732.0, 34651.0], [730.0, 33794.0], [738.0, 34242.0], [762.0, 7516.181818181818], [740.0, 7030.923076923077], [742.0, 5948.76], [744.0, 34300.0], [748.0, 32227.0], [736.0, 33489.0], [750.0, 35352.0], [756.0, 8825.625], [758.0, 33753.5], [766.0, 14131.0], [764.0, 34156.0], [752.0, 34509.0], [754.0, 33747.0], [770.0, 33819.0], [792.0, 24433.0], [776.0, 12102.0], [778.0, 33770.0], [768.0, 34197.0], [772.0, 34638.0], [774.0, 34435.0], [782.0, 34327.0], [784.0, 19933.5], [786.0, 34250.0], [788.0, 32267.0], [790.0, 33240.5], [798.0, 34042.0], [794.0, 34412.0], [800.0, 37065.0], [826.0, 34663.0], [830.0, 37222.0], [808.0, 10173.166666666666], [810.0, 35910.0], [812.0, 34136.0], [802.0, 33454.0], [804.0, 33725.0], [814.0, 36100.0], [822.0, 33126.0], [816.0, 36852.0], [818.0, 34449.0], [820.0, 37010.0], [828.0, 34978.0], [824.0, 38538.0], [806.0, 35849.0], [858.0, 15369.333333333334], [848.0, 34115.0], [850.0, 37172.0], [852.0, 35880.0], [860.0, 38042.0], [856.0, 35591.0], [836.0, 36045.0], [834.0, 36842.0], [832.0, 34868.0], [846.0, 33311.0], [844.0, 36021.0], [842.0, 34271.0], [840.0, 35840.0], [854.0, 35311.0], [864.0, 36867.0], [892.0, 36216.0], [872.0, 20497.5], [874.0, 32616.0], [876.0, 36456.0], [866.0, 36627.0], [878.0, 34649.0], [880.0, 37204.0], [882.0, 35033.0], [884.0, 33333.0], [886.0, 37690.0], [894.0, 36378.0], [890.0, 37743.0], [888.0, 37500.0], [870.0, 36749.0], [868.0, 25714.0], [896.0, 38730.0], [924.0, 33802.0], [904.0, 35804.0], [906.0, 13407.5], [908.0, 20846.5], [898.0, 35048.0], [900.0, 36293.0], [902.0, 37559.0], [910.0, 36165.0], [912.0, 33977.0], [914.0, 36546.0], [916.0, 35542.0], [918.0, 35964.0], [926.0, 37069.0], [956.0, 35889.0], [946.0, 36255.0], [948.0, 36403.0], [958.0, 35888.0], [954.0, 34772.0], [952.0, 30155.0], [928.0, 36339.0], [930.0, 35551.0], [932.0, 36190.0], [934.0, 36042.0], [942.0, 35970.0], [940.0, 36504.0], [938.0, 36541.0], [936.0, 36404.0], [950.0, 35823.0], [960.0, 35390.0], [962.0, 15875.0], [974.0, 36645.0], [972.0, 37216.0], [970.0, 37226.0], [968.0, 38180.0], [976.0, 36214.0], [978.0, 35951.0], [980.0, 35534.0], [990.0, 36191.0], [986.0, 38078.0], [984.0, 36810.0], [966.0, 35692.0], [982.0, 35566.0], [1020.0, 35156.0], [1008.0, 35197.0], [1010.0, 35131.0], [1012.0, 36283.0], [1022.0, 34978.0], [1018.0, 35974.0], [1016.0, 35902.0], [992.0, 36652.0], [994.0, 37608.0], [996.0, 35380.0], [998.0, 36302.0], [1006.0, 36562.0], [1004.0, 35201.0], [1002.0, 37430.0], [1000.0, 36623.0], [1014.0, 26362.0], [1080.0, 36472.0], [1056.0, 36545.0], [1060.0, 37576.0], [1064.0, 35753.0], [1076.0, 37110.0], [1072.0, 36546.0], [1036.0, 35425.0], [1032.0, 36908.0], [1028.0, 36059.0], [1024.0, 36248.0], [1048.0, 37600.0], [1044.0, 37360.0], [1040.0, 36329.0], [1068.0, 36007.0], [1092.0, 36866.5], [1136.0, 36906.0], [1088.0, 36635.0], [1096.0, 36201.0], [1100.0, 36976.0], [1116.0, 37475.0], [1112.0, 37864.0], [1108.0, 37614.0], [1104.0, 38051.0], [1132.0, 38602.0], [1128.0, 37456.0], [1120.0, 35646.0], [1140.0, 21938.0], [1148.0, 38115.0], [1144.0, 37563.0], [1156.0, 25492.0], [1164.0, 12903.6], [1152.0, 38653.0], [1160.0, 37350.0], [1180.0, 36234.0], [1176.0, 37462.0], [1172.0, 36651.0], [1168.0, 37508.0], [1196.0, 15077.5], [1192.0, 39209.0], [1188.0, 37613.0], [1184.0, 30586.5], [1212.0, 36462.0], [1208.0, 38380.0], [1204.0, 37592.0], [1200.0, 37831.0], [1244.0, 39010.0], [1216.0, 22293.5], [1232.0, 23530.5], [1236.0, 39923.0], [1240.0, 36852.0], [1248.0, 26433.0], [1252.0, 39672.0], [1256.0, 38693.0], [1260.0, 39071.0], [1268.0, 23343.5], [1276.0, 38359.0], [1264.0, 39466.0], [1228.0, 39621.0], [1224.0, 38318.0], [1220.0, 36842.0], [1340.0, 38891.0], [1316.0, 42426.0], [1312.0, 39418.0], [1324.0, 37653.0], [1336.0, 39703.0], [1332.0, 39163.0], [1328.0, 39382.0], [1292.0, 39863.0], [1288.0, 39829.0], [1284.0, 39178.0], [1308.0, 40112.0], [1304.0, 39466.0], [1300.0, 38515.0], [1296.0, 39307.0], [1348.0, 39020.0], [1352.0, 38597.0], [1344.0, 38891.0], [1356.0, 38979.0], [1372.0, 39603.0], [1368.0, 40581.5], [1364.0, 38490.0], [1360.0, 39811.0], [1392.0, 39852.0], [1396.0, 39124.0], [1400.0, 41792.5], [1388.0, 39676.0], [1376.0, 39360.0], [1380.0, 41033.0], [1384.0, 38752.0], [1404.0, 39572.0], [1416.0, 40238.0], [1408.0, 16009.0], [1432.0, 38994.0], [1436.0, 39126.0], [1412.0, 38722.0], [1420.0, 40959.0], [1456.0, 40077.0], [1460.0, 40212.0], [1452.0, 20475.0], [1448.0, 39803.0], [1444.0, 39038.0], [1440.0, 40346.0], [1468.0, 39864.0], [1464.0, 8187.5], [1428.0, 10850.09090909091], [1424.0, 39321.0], [1476.0, 39993.0], [1472.0, 39452.0], [1500.0, 40081.25], [1496.0, 39799.333333333336], [1492.0, 40073.0], [1488.0, 40421.333333333336], [1484.0, 30269.666666666668], [1480.0, 40420.0], [1520.0, 17294.333333333336], [1524.0, 41433.75], [1528.0, 26564.083333333336], [1532.0, 32667.5], [1504.0, 41893.0], [1508.0, 20649.5], [1512.0, 24433.5], [1516.0, 40373.5], [1540.0, 41343.666666666664], [1592.0, 41920.777777777774], [1536.0, 41309.0], [1544.0, 41407.0], [1548.0, 41284.0], [1584.0, 41696.857142857145], [1556.0, 34962.0], [1552.0, 40806.75], [1560.0, 41190.4], [1564.0, 41295.0], [1576.0, 32147.428571428572], [1580.0, 34559.6], [1588.0, 42183.2], [1596.0, 25658.75], [1568.0, 41806.0], [1572.0, 41336.333333333336], [1628.0, 41749.14285714287], [1620.0, 26235.0], [1616.0, 41109.666666666664], [1624.0, 41508.16666666667], [1632.0, 30947.0], [1636.0, 41744.0], [1660.0, 29970.727272727272], [1640.0, 42256.11111111111], [1644.0, 41395.25], [1652.0, 31053.0], [1648.0, 40916.0], [1612.0, 40846.75], [1608.0, 41378.25], [1604.0, 41553.5], [1600.0, 42169.5], [1656.0, 41194.5], [1692.0, 42603.666666666664], [1680.0, 42115.875], [1684.0, 42335.5], [1688.0, 41263.0], [1664.0, 42256.0], [1668.0, 41249.5], [1672.0, 41220.0], [1676.0, 41650.0], [1700.0, 26422.5], [1696.0, 41782.0], [1704.0, 42182.0], [1708.0, 42585.5], [1724.0, 42475.0], [1720.0, 41821.5], [1716.0, 42781.857142857145], [1712.0, 41071.125], [1736.0, 41777.0], [1728.0, 42676.5], [1740.0, 42641.5], [1776.0, 42332.8], [1780.0, 41979.5], [1784.0, 43078.77777777778], [1744.0, 41669.75], [1748.0, 43589.0], [1752.0, 42447.4], [1756.0, 41610.0], [1732.0, 41933.0], [1760.0, 43089.8], [1764.0, 42542.88888888889], [1768.0, 41704.0], [1772.0, 41769.0], [1788.0, 43213.0], [1820.0, 41451.0], [1844.0, 15357.0], [1808.0, 24603.000000000004], [1812.0, 41347.92857142857], [1816.0, 42222.07692307692], [1824.0, 36007.0], [1852.0, 41775.0], [1848.0, 42312.0], [1828.0, 30326.125], [1832.0, 41787.0], [1836.0, 43357.0], [1840.0, 41798.5], [1792.0, 42838.4], [1796.0, 41681.96296296296], [1800.0, 41889.166666666664], [1804.0, 41552.0], [1884.0, 42166.0], [1856.0, 42558.5], [1872.0, 42550.0], [1876.0, 43564.0], [1880.0, 42608.57142857143], [1860.0, 43209.333333333336], [1864.0, 43204.0], [1868.0, 42256.0], [1892.0, 25107.666666666664], [1896.0, 41980.0], [1900.0, 42076.0], [1908.0, 41892.2], [1912.0, 41708.0], [1888.0, 41933.0], [1916.0, 41236.0], [1932.0, 42115.41666666667], [1968.0, 42360.75], [1976.0, 42760.23999999999], [1980.0, 42431.54285714286], [1928.0, 42158.8], [1972.0, 43057.125], [1936.0, 34964.25], [1944.0, 19399.75], [1940.0, 42639.22222222222], [1948.0, 41813.857142857145], [1920.0, 41581.0], [1924.0, 40099.68749999999], [1952.0, 42134.22222222222], [1956.0, 40810.08333333333], [1960.0, 41899.6], [1964.0, 39906.25], [1992.0, 42602.78339350175], [1996.0, 42380.281853281864], [1984.0, 39468.135135135126], [2000.0, 34972.898640296655], [1988.0, 42524.05747126435], [1085.0, 36529.0], [1061.0, 38340.0], [1057.0, 35562.0], [1065.0, 36592.0], [1069.0, 37493.0], [1081.0, 35776.0], [1077.0, 36263.0], [1073.0, 35626.0], [1037.0, 35863.0], [1033.0, 36427.0], [1029.0, 35532.0], [1025.0, 35118.0], [1053.0, 36896.5], [1049.0, 37246.0], [1045.0, 37983.0], [1041.0, 37111.0], [1149.0, 38136.0], [1089.0, 22359.0], [1113.0, 22689.5], [1109.0, 37184.0], [1105.0, 37132.0], [1129.0, 37588.0], [1125.0, 37350.0], [1121.0, 37750.0], [1133.0, 37310.0], [1145.0, 36808.0], [1141.0, 39022.0], [1137.0, 37617.0], [1101.0, 37169.0], [1097.0, 37675.0], [1093.0, 37306.0], [1153.0, 37555.0], [1209.0, 38629.0], [1161.0, 22399.5], [1181.0, 22758.0], [1157.0, 36510.0], [1177.0, 39685.0], [1173.0, 37139.0], [1169.0, 37371.0], [1185.0, 38987.0], [1189.0, 38347.0], [1193.0, 38589.0], [1197.0, 35789.0], [1213.0, 39318.0], [1205.0, 37060.0], [1201.0, 37360.0], [1165.0, 36077.0], [1217.0, 25807.0], [1273.0, 27956.333333333332], [1237.0, 37223.0], [1233.0, 37622.0], [1241.0, 39665.0], [1221.0, 36637.0], [1225.0, 37560.0], [1245.0, 36651.0], [1249.0, 37070.0], [1253.0, 38638.0], [1257.0, 39226.0], [1261.0, 40242.0], [1277.0, 38804.0], [1269.0, 39272.0], [1265.0, 39343.0], [1341.0, 39499.0], [1337.0, 39591.0], [1317.0, 41025.0], [1321.0, 38909.5], [1325.0, 39623.0], [1313.0, 39084.0], [1333.0, 41608.0], [1329.0, 39233.0], [1281.0, 32971.5], [1285.0, 38882.0], [1289.0, 39784.0], [1293.0, 38302.0], [1309.0, 38257.0], [1305.0, 38908.0], [1301.0, 39713.0], [1297.0, 39357.0], [1349.0, 40073.0], [1353.0, 39764.0], [1345.0, 39947.0], [1357.0, 38440.0], [1373.0, 39594.0], [1369.0, 39522.0], [1365.0, 39908.0], [1361.0, 39281.0], [1393.0, 38242.0], [1397.0, 39529.0], [1401.0, 39091.0], [1385.0, 23841.5], [1389.0, 40003.0], [1377.0, 39946.0], [1381.0, 39329.5], [1405.0, 40253.0], [1417.0, 18387.333333333336], [1409.0, 39607.0], [1433.0, 39209.0], [1437.0, 18056.333333333336], [1413.0, 41045.5], [1421.0, 37831.0], [1457.0, 40004.0], [1461.0, 33453.5], [1449.0, 40420.0], [1445.0, 38373.0], [1453.0, 40481.0], [1469.0, 28145.0], [1465.0, 40077.11111111111], [1425.0, 40839.0], [1429.0, 24040.5], [1477.0, 39641.5], [1473.0, 24199.5], [1501.0, 37291.8], [1497.0, 40296.666666666664], [1493.0, 40050.333333333336], [1489.0, 40909.6], [1481.0, 41226.0], [1485.0, 40885.0], [1521.0, 40427.0], [1525.0, 38303.75], [1529.0, 39282.666666666664], [1533.0, 41084.8], [1505.0, 13839.333333333332], [1509.0, 40664.5], [1517.0, 40364.333333333336], [1513.0, 40102.2], [1541.0, 40960.0], [1549.0, 21587.8], [1537.0, 40862.0], [1545.0, 41226.8], [1585.0, 41716.23076923077], [1557.0, 41252.0], [1553.0, 31607.0], [1561.0, 39842.6], [1565.0, 37587.0], [1577.0, 41155.2], [1581.0, 39329.0], [1593.0, 40933.0], [1589.0, 41494.0], [1569.0, 41478.333333333336], [1573.0, 40875.0], [1597.0, 41586.5], [1649.0, 42472.5], [1657.0, 20987.666666666664], [1617.0, 41943.0], [1621.0, 41315.0], [1625.0, 41731.0], [1629.0, 36588.33333333333], [1633.0, 41975.5], [1661.0, 41868.0], [1637.0, 36296.666666666664], [1641.0, 41912.66666666667], [1645.0, 41011.5], [1613.0, 35853.0], [1609.0, 41922.666666666664], [1605.0, 41184.0], [1601.0, 42091.333333333336], [1653.0, 41621.0], [1693.0, 41924.0], [1721.0, 42632.0], [1725.0, 42301.6], [1681.0, 41671.0], [1685.0, 42393.0], [1689.0, 42825.0], [1665.0, 41523.0], [1669.0, 41401.0], [1673.0, 42209.0], [1677.0, 41329.0], [1697.0, 42881.0], [1701.0, 41553.666666666664], [1705.0, 41279.0], [1709.0, 42390.0], [1717.0, 42565.5], [1713.0, 42250.0], [1741.0, 41969.8], [1785.0, 43134.25], [1789.0, 41851.0], [1737.0, 43793.5], [1777.0, 43040.0], [1781.0, 43906.5], [1745.0, 39815.692307692305], [1749.0, 42223.666666666664], [1753.0, 42581.0], [1757.0, 43286.33333333333], [1729.0, 41921.5], [1733.0, 42495.5], [1761.0, 38472.0], [1765.0, 41712.0], [1769.0, 42270.0], [1773.0, 42908.5], [1797.0, 42012.85294117646], [1845.0, 33489.555555555555], [1809.0, 42009.5], [1813.0, 39705.230769230766], [1817.0, 40594.90909090909], [1821.0, 41558.66666666667], [1825.0, 41424.0], [1853.0, 27506.0], [1849.0, 41729.5], [1833.0, 42023.5], [1829.0, 41367.333333333336], [1837.0, 41979.88888888889], [1841.0, 42224.0], [1793.0, 42713.86666666666], [1801.0, 42021.6], [1805.0, 42275.0], [1885.0, 41855.0], [1869.0, 27148.75], [1873.0, 34289.75], [1877.0, 41616.0], [1881.0, 41910.5], [1857.0, 41693.0], [1861.0, 43761.0], [1865.0, 42367.5], [1893.0, 42728.0], [1897.0, 41501.0], [1901.0, 42394.0], [1909.0, 42137.142857142855], [1905.0, 42012.0], [1913.0, 42053.4], [1889.0, 38826.75], [1917.0, 42195.5], [1949.0, 42116.5], [1929.0, 41737.333333333336], [1933.0, 40931.333333333336], [1969.0, 42790.5], [1973.0, 36208.0], [1977.0, 42905.97619047619], [1937.0, 36053.8], [1941.0, 42566.28571428572], [1945.0, 41544.00000000001], [1921.0, 41284.0], [1925.0, 41686.6], [1953.0, 40374.375], [1957.0, 42282.333333333336], [1961.0, 36500.5], [1965.0, 42526.428571428565], [1981.0, 42484.153846153844], [1993.0, 42088.295454545456], [1997.0, 41929.41463414633], [1989.0, 42063.46666666665], [1985.0, 42166.36956521737], [543.0, 31844.0], [513.0, 31986.0], [527.0, 32163.0], [525.0, 33542.0], [523.0, 31418.0], [521.0, 31678.0], [529.0, 31450.0], [531.0, 34331.0], [533.0, 33889.0], [535.0, 31984.0], [541.0, 32230.0], [539.0, 32224.0], [537.0, 33715.0], [519.0, 31801.0], [517.0, 31864.0], [515.0, 31538.0], [547.0, 32169.0], [569.0, 18319.5], [551.0, 13794.0], [559.0, 31436.0], [549.0, 34515.0], [545.0, 32025.0], [553.0, 32292.0], [557.0, 13357.666666666666], [563.0, 18052.0], [565.0, 31647.0], [567.0, 33595.0], [571.0, 17764.0], [573.0, 33159.0], [575.0, 32113.0], [561.0, 31466.0], [591.0, 33669.0], [577.0, 3899.0], [587.0, 18196.0], [585.0, 33491.0], [589.0, 33758.0], [595.0, 18311.5], [597.0, 34043.0], [599.0, 31688.0], [601.0, 13918.0], [583.0, 32324.0], [581.0, 33590.0], [579.0, 32855.0], [603.0, 33297.0], [607.0, 33918.0], [593.0, 32138.0], [605.0, 32520.0], [611.0, 32822.0], [609.0, 32556.0], [613.0, 33948.0], [615.0, 34141.0], [623.0, 33859.0], [621.0, 34246.0], [619.0, 32826.0], [617.0, 31848.0], [639.0, 33082.0], [625.0, 30944.0], [627.0, 34412.0], [629.0, 33172.0], [631.0, 34103.0], [637.0, 33321.0], [635.0, 33586.0], [633.0, 34053.0], [669.0, 32237.0], [671.0, 33808.0], [657.0, 34549.0], [659.0, 34487.0], [661.0, 33168.0], [667.0, 33374.0], [665.0, 33234.0], [655.0, 33088.0], [641.0, 32960.0], [643.0, 31903.0], [645.0, 32761.0], [647.0, 33731.0], [653.0, 33707.0], [649.0, 33425.0], [663.0, 33232.0], [687.0, 9147.428571428572], [681.0, 34000.0], [683.0, 34353.0], [685.0, 7167.636363636364], [679.0, 34636.0], [677.0, 34539.0], [675.0, 33569.0], [673.0, 34048.0], [697.0, 34038.0], [691.0, 34921.0], [689.0, 34787.0], [693.0, 35252.0], [695.0, 34524.0], [703.0, 35068.0], [701.0, 34149.0], [699.0, 33176.0], [707.0, 12312.5], [705.0, 33951.0], [709.0, 33564.0], [711.0, 33968.0], [719.0, 35291.0], [717.0, 33794.0], [715.0, 35784.0], [713.0, 34674.0], [725.0, 19247.5], [727.0, 12028.0], [735.0, 34222.0], [721.0, 34227.0], [723.0, 32892.0], [733.0, 35183.0], [731.0, 35472.0], [729.0, 33899.0], [751.0, 34318.0], [741.0, 34414.0], [761.0, 29432.0], [743.0, 34946.0], [745.0, 19532.5], [747.0, 34105.0], [749.0, 34552.0], [737.0, 34617.0], [739.0, 25234.0], [755.0, 9441.166666666666], [759.0, 19549.5], [765.0, 35103.0], [763.0, 33212.0], [767.0, 33226.0], [753.0, 35177.0], [769.0, 32927.0], [797.0, 34022.0], [777.0, 19797.0], [781.0, 9171.428571428572], [779.0, 33464.0], [783.0, 33645.0], [771.0, 33315.0], [775.0, 36135.0], [793.0, 34151.0], [785.0, 34436.0], [787.0, 34617.0], [791.0, 35560.0], [799.0, 34227.0], [795.0, 34091.0], [815.0, 34580.0], [805.0, 19975.5], [809.0, 37082.0], [811.0, 35582.0], [813.0, 34602.0], [801.0, 34151.0], [803.0, 34399.0], [821.0, 21463.0], [823.0, 15390.0], [831.0, 34331.0], [817.0, 33721.0], [819.0, 34438.0], [829.0, 37909.0], [827.0, 36010.0], [825.0, 36863.0], [807.0, 34676.0], [861.0, 35875.0], [857.0, 36992.0], [863.0, 35961.5], [849.0, 35826.0], [851.0, 35594.0], [853.0, 35765.0], [859.0, 36981.0], [839.0, 35524.666666666664], [835.0, 37182.0], [833.0, 34526.0], [847.0, 35044.0], [845.0, 34288.0], [843.0, 35102.0], [841.0, 33458.0], [855.0, 35869.0], [879.0, 35203.0], [867.0, 15089.666666666666], [873.0, 36585.0], [875.0, 33489.0], [877.0, 37786.0], [865.0, 36528.0], [895.0, 35115.0], [881.0, 36974.0], [883.0, 33249.0], [885.0, 33183.0], [887.0, 37550.0], [893.0, 33849.0], [891.0, 34760.0], [889.0, 37629.0], [871.0, 35553.0], [869.0, 32168.0], [911.0, 34225.0], [905.0, 21921.5], [907.0, 34950.0], [909.0, 37303.0], [897.0, 36079.0], [899.0, 35074.0], [901.0, 37355.0], [903.0, 33786.0], [927.0, 37968.0], [913.0, 37334.0], [915.0, 34852.0], [917.0, 35855.0], [919.0, 36409.0], [925.0, 35684.0], [923.0, 35687.5], [921.0, 36576.5], [957.0, 38153.0], [959.0, 22956.0], [945.0, 36305.5], [947.0, 36325.0], [949.0, 35692.0], [955.0, 35651.0], [953.0, 37283.0], [943.0, 39091.0], [929.0, 35330.0], [931.0, 32459.0], [933.0, 36524.0], [935.0, 36312.0], [941.0, 36199.0], [939.0, 37494.0], [937.0, 36225.0], [951.0, 36010.0], [961.0, 35329.0], [987.0, 35972.0], [975.0, 35907.0], [973.0, 35548.0], [971.0, 35582.0], [969.0, 37928.0], [991.0, 26225.0], [977.0, 35515.0], [979.0, 36500.0], [981.0, 37365.0], [989.0, 36049.5], [985.0, 35537.0], [967.0, 37463.0], [965.0, 35941.0], [963.0, 38777.0], [983.0, 36015.0], [1021.0, 36822.0], [1023.0, 35752.0], [1009.0, 35083.0], [1011.0, 35610.0], [1013.0, 35570.0], [1019.0, 32455.0], [1017.0, 34856.0], [1007.0, 38262.0], [993.0, 36721.0], [995.0, 36588.0], [997.0, 35376.0], [999.0, 37230.0], [1005.0, 34865.0], [1003.0, 36441.0], [1001.0, 37007.0], [1015.0, 34888.0], [1082.0, 37683.0], [1074.0, 35935.0], [1086.0, 37184.0], [1058.0, 36162.0], [1062.0, 36609.0], [1066.0, 36023.0], [1078.0, 36545.0], [1038.0, 36233.0], [1034.0, 36321.0], [1030.0, 35537.0], [1026.0, 37028.0], [1050.0, 37209.0], [1046.0, 35664.0], [1042.0, 35339.0], [1070.0, 36537.0], [1094.0, 21925.5], [1146.0, 37817.0], [1090.0, 35613.0], [1098.0, 37034.0], [1102.0, 38389.0], [1114.0, 37198.0], [1110.0, 37323.0], [1106.0, 36368.0], [1134.0, 22113.0], [1130.0, 38192.0], [1126.0, 37169.0], [1122.0, 25507.0], [1150.0, 37998.0], [1142.0, 36819.0], [1138.0, 37716.0], [1154.0, 36476.0], [1210.0, 38330.0], [1182.0, 17807.333333333336], [1158.0, 36265.0], [1162.0, 36711.0], [1178.0, 37433.0], [1174.0, 37059.0], [1170.0, 37005.0], [1194.0, 37700.0], [1190.0, 36334.0], [1186.0, 40518.0], [1198.0, 37412.0], [1214.0, 37178.0], [1206.0, 39704.0], [1202.0, 38147.0], [1166.0, 38921.0], [1246.0, 38657.0], [1270.0, 17972.0], [1234.0, 38795.0], [1238.0, 38160.0], [1242.0, 38162.0], [1250.0, 17942.666666666664], [1254.0, 38745.0], [1258.0, 38584.0], [1262.0, 38669.0], [1278.0, 38813.0], [1274.0, 40066.0], [1266.0, 39602.0], [1230.0, 37620.0], [1226.0, 26756.0], [1222.0, 36934.0], [1218.0, 37740.0], [1342.0, 38920.0], [1334.0, 39595.0], [1318.0, 23175.0], [1314.0, 39894.0], [1322.0, 39625.0], [1326.0, 39509.0], [1338.0, 40014.0], [1330.0, 40107.0], [1294.0, 39533.0], [1286.0, 39066.0], [1282.0, 38013.0], [1310.0, 38893.0], [1306.0, 39567.0], [1302.0, 39398.0], [1298.0, 39666.0], [1350.0, 39672.0], [1354.0, 38829.0], [1394.0, 40429.0], [1402.0, 38120.0], [1406.0, 40185.0], [1346.0, 38983.0], [1358.0, 38694.0], [1374.0, 38715.0], [1370.0, 39581.0], [1366.0, 39062.0], [1398.0, 39568.0], [1390.0, 12941.285714285716], [1386.0, 38698.0], [1378.0, 38890.0], [1382.0, 39315.0], [1414.0, 41657.0], [1410.0, 40123.0], [1438.0, 38601.0], [1434.0, 11905.666666666666], [1418.0, 14318.812500000002], [1422.0, 41019.0], [1458.0, 40047.0], [1462.0, 39293.0], [1450.0, 39989.0], [1446.0, 38461.0], [1442.0, 40335.0], [1454.0, 40496.0], [1470.0, 40656.0], [1466.0, 39109.0], [1426.0, 27165.0], [1430.0, 19061.0], [1478.0, 23762.0], [1474.0, 30113.0], [1502.0, 40348.333333333336], [1498.0, 40855.0], [1494.0, 40177.25], [1490.0, 38695.5], [1482.0, 39414.0], [1486.0, 40038.0], [1522.0, 18493.5], [1526.0, 36595.77777777778], [1530.0, 39592.333333333336], [1534.0, 25048.5], [1506.0, 17402.285714285714], [1510.0, 33452.666666666664], [1518.0, 37989.833333333336], [1542.0, 41091.0], [1550.0, 40821.0], [1538.0, 41241.2], [1546.0, 19914.0], [1586.0, 41795.50000000001], [1558.0, 25350.166666666668], [1554.0, 30994.0], [1562.0, 41415.0], [1566.0, 41378.57142857143], [1578.0, 41295.0], [1582.0, 41628.0], [1594.0, 25837.5], [1590.0, 42108.5], [1570.0, 41175.0], [1574.0, 42108.5], [1598.0, 41962.5], [1650.0, 41206.0], [1618.0, 41727.0], [1622.0, 42211.0], [1626.0, 41963.0], [1634.0, 42081.571428571435], [1662.0, 41615.666666666664], [1638.0, 25565.5], [1642.0, 41354.0], [1646.0, 41857.375], [1614.0, 41008.0], [1610.0, 45150.0], [1606.0, 41182.90000000001], [1602.0, 41219.6], [1630.0, 42514.25], [1654.0, 42464.0], [1658.0, 26411.5], [1670.0, 41220.8], [1666.0, 43376.5], [1682.0, 16389.2], [1686.0, 41329.0], [1674.0, 41180.75], [1678.0, 40729.0], [1694.0, 42050.6], [1702.0, 41871.0], [1706.0, 42577.666666666664], [1710.0, 41613.5], [1726.0, 41911.75], [1722.0, 43872.5], [1718.0, 42356.0], [1714.0, 42539.0], [1730.0, 42379.16666666667], [1738.0, 10532.0], [1742.0, 41029.0], [1778.0, 43595.333333333336], [1782.0, 43180.625], [1786.0, 42349.57142857143], [1746.0, 41435.0], [1750.0, 40862.0], [1754.0, 42165.666666666664], [1734.0, 43377.0], [1758.0, 43594.0], [1762.0, 42639.21428571428], [1766.0, 41931.5], [1770.0, 43170.0], [1774.0, 41785.0], [1790.0, 42488.625], [1854.0, 42552.0], [1822.0, 29643.8], [1810.0, 41574.5], [1818.0, 41550.0], [1814.0, 42212.0], [1826.0, 21148.0], [1850.0, 32539.333333333332], [1846.0, 42013.0], [1834.0, 30276.8], [1830.0, 41929.2], [1838.0, 41783.2], [1842.0, 26887.5], [1794.0, 42346.0], [1798.0, 41392.333333333336], [1802.0, 37675.333333333336], [1806.0, 42241.625], [1858.0, 41236.0], [1914.0, 19809.25], [1874.0, 42870.0], [1878.0, 41668.25], [1882.0, 41452.0], [1862.0, 42584.0], [1866.0, 42043.8], [1886.0, 41880.666666666664], [1898.0, 42358.5], [1902.0, 42895.0], [1910.0, 42211.0], [1906.0, 42881.333333333336], [1870.0, 43013.333333333336], [1890.0, 42531.0], [1918.0, 42042.8], [1922.0, 41589.333333333336], [1934.0, 42199.5], [1930.0, 42256.0], [1970.0, 42394.35294117647], [1974.0, 39781.333333333336], [1978.0, 41758.333333333336], [1942.0, 42077.0], [1938.0, 39819.8], [1946.0, 42444.0], [1926.0, 40204.0], [1950.0, 41756.0], [1982.0, 36359.75], [1954.0, 42040.0], [1958.0, 42074.5], [1962.0, 42097.54545454545], [1966.0, 40161.30000000001], [1998.0, 41663.96296296297], [1994.0, 42389.34782608696], [1990.0, 42611.600000000006], [1986.0, 42172.07692307692], [1083.0, 37264.0], [1063.0, 20669.0], [1059.0, 25901.0], [1067.0, 36015.0], [1071.0, 37077.0], [1079.0, 21807.5], [1087.0, 37273.0], [1075.0, 35928.0], [1039.0, 35664.0], [1035.0, 35922.0], [1031.0, 37159.0], [1027.0, 35333.0], [1055.0, 32097.0], [1051.0, 37757.0], [1047.0, 37967.0], [1043.0, 35929.0], [1119.0, 37485.333333333336], [1147.0, 37327.0], [1111.0, 37808.0], [1107.0, 37099.0], [1115.0, 40187.0], [1131.0, 21853.5], [1127.0, 36495.0], [1123.0, 36980.0], [1135.0, 37153.0], [1151.0, 37013.0], [1143.0, 37612.0], [1139.0, 38709.0], [1103.0, 37363.0], [1099.0, 37460.0], [1095.0, 37797.0], [1215.0, 22892.5], [1155.0, 37717.0], [1159.0, 37244.0], [1179.0, 36973.0], [1175.0, 37036.0], [1171.0, 37606.0], [1187.0, 37576.0], [1191.0, 38011.0], [1195.0, 38142.0], [1199.0, 37402.0], [1211.0, 38263.0], [1207.0, 38297.0], [1203.0, 38640.0], [1167.0, 25730.0], [1163.0, 37942.0], [1247.0, 37747.0], [1239.0, 21967.5], [1235.0, 26206.0], [1243.0, 38043.0], [1219.0, 38573.0], [1223.0, 36838.0], [1231.0, 36683.0], [1227.0, 37868.0], [1279.0, 23361.5], [1251.0, 40357.0], [1255.0, 39441.0], [1259.0, 38658.0], [1263.0, 39245.0], [1275.0, 39196.0], [1271.0, 37869.0], [1267.0, 38791.0], [1315.0, 39430.0], [1319.0, 39522.0], [1323.0, 39678.0], [1327.0, 40026.0], [1343.0, 40316.0], [1339.0, 38849.0], [1335.0, 39914.0], [1331.0, 39547.0], [1311.0, 38872.0], [1283.0, 39096.0], [1287.0, 38460.0], [1291.0, 38916.5], [1295.0, 39505.0], [1307.0, 39205.0], [1303.0, 38971.0], [1299.0, 27456.0], [1351.0, 39164.0], [1355.0, 24450.0], [1347.0, 39377.0], [1359.0, 38977.0], [1375.0, 39137.0], [1371.0, 38981.0], [1367.0, 39726.0], [1363.0, 39010.0], [1395.0, 41015.666666666664], [1399.0, 38483.0], [1387.0, 39659.0], [1391.0, 9116.533333333333], [1407.0, 39126.0], [1379.0, 38329.0], [1383.0, 40331.0], [1403.0, 39797.0], [1419.0, 40504.0], [1415.0, 29152.0], [1431.0, 16066.0], [1411.0, 12565.142857142859], [1439.0, 40530.0], [1435.0, 40753.0], [1423.0, 41119.0], [1459.0, 39638.0], [1451.0, 40183.0], [1447.0, 38776.0], [1443.0, 38538.0], [1455.0, 39386.0], [1471.0, 24530.5], [1467.0, 29528.0], [1463.0, 7501.0], [1427.0, 40779.0], [1483.0, 41319.0], [1523.0, 24739.0], [1479.0, 16300.0], [1503.0, 41020.0], [1499.0, 27191.0], [1495.0, 39536.0], [1491.0, 40665.0], [1475.0, 40058.0], [1487.0, 29127.0], [1527.0, 18935.666666666664], [1531.0, 32867.75], [1535.0, 35658.16666666667], [1507.0, 40653.666666666664], [1511.0, 40294.0], [1519.0, 40024.0], [1515.0, 40190.8], [1543.0, 41325.5], [1539.0, 23260.285714285714], [1547.0, 20514.0], [1551.0, 26181.0], [1555.0, 40903.0], [1559.0, 41516.0], [1563.0, 41018.0], [1567.0, 41497.5], [1579.0, 41631.5], [1583.0, 41744.2], [1587.0, 36522.57142857143], [1591.0, 41814.7], [1595.0, 41799.4], [1599.0, 42130.0], [1571.0, 40419.0], [1575.0, 41145.0], [1663.0, 41227.0], [1619.0, 40962.0], [1623.0, 41468.6], [1627.0, 41450.71428571428], [1635.0, 42412.0], [1639.0, 41875.86666666666], [1643.0, 31019.666666666668], [1647.0, 41807.0], [1651.0, 42022.0], [1615.0, 40857.5], [1611.0, 41435.2], [1607.0, 41253.2], [1603.0, 43648.5], [1631.0, 42772.0], [1655.0, 42384.0], [1659.0, 9916.5], [1671.0, 41227.0], [1695.0, 42891.0], [1679.0, 37190.0], [1683.0, 41711.5], [1687.0, 42179.0], [1691.0, 42126.75], [1667.0, 41314.0], [1675.0, 40385.0], [1699.0, 42246.333333333336], [1703.0, 43137.0], [1707.0, 42267.57142857143], [1711.0, 42648.0], [1727.0, 43255.0], [1723.0, 41693.0], [1719.0, 40281.4], [1715.0, 43065.0], [1735.0, 23583.0], [1759.0, 27024.5], [1739.0, 42812.5], [1743.0, 41537.5], [1779.0, 43029.5], [1783.0, 41766.1111111111], [1747.0, 42257.0], [1751.0, 41952.0], [1755.0, 42186.5], [1731.0, 42548.72727272727], [1763.0, 43093.63636363636], [1767.0, 42042.5], [1771.0, 42087.666666666664], [1775.0, 43144.0], [1791.0, 42679.46428571429], [1787.0, 43349.6], [1855.0, 42187.0], [1811.0, 41383.36363636363], [1819.0, 32607.6], [1815.0, 41881.8], [1827.0, 42112.8], [1847.0, 42013.5], [1851.0, 19319.75], [1831.0, 41433.5], [1835.0, 21825.333333333336], [1839.0, 41691.44444444445], [1823.0, 41854.75], [1799.0, 40760.666666666664], [1803.0, 41847.666666666664], [1807.0, 42107.0], [1843.0, 13632.07142857143], [1887.0, 41879.0], [1875.0, 41997.0], [1879.0, 40737.0], [1883.0, 42136.75], [1859.0, 42221.42857142857], [1863.0, 43949.0], [1867.0, 43075.333333333336], [1891.0, 36946.66666666667], [1895.0, 42063.5], [1899.0, 42136.0], [1903.0, 42770.5], [1911.0, 29121.142857142855], [1907.0, 42161.25], [1871.0, 42021.555555555555], [1919.0, 41897.25], [1915.0, 42011.0], [1931.0, 37560.66666666667], [1927.0, 16733.30769230769], [1935.0, 36888.875], [1971.0, 42078.81081081081], [1975.0, 42606.357142857145], [1979.0, 43033.0], [1943.0, 42218.0], [1939.0, 40463.57142857143], [1947.0, 42052.07692307692], [1951.0, 42370.333333333336], [1923.0, 41909.333333333336], [1983.0, 41801.21739130434], [1955.0, 42085.0], [1959.0, 41904.0], [1963.0, 42295.5], [1967.0, 42446.5], [1995.0, 40002.57142857144], [1999.0, 42399.72580645162], [1991.0, 42908.53947368422], [1987.0, 42617.21276595745], [1.0, 24848.0]], "isOverall": false, "label": "GET Request", "isController": false}, {"data": [[1717.3174999999994, 36082.96139999985]], "isOverall": false, "label": "GET Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1274.5833333333333, "minX": 1.54407468E12, "maxY": 48947.7, "series": [{"data": [[1.54407492E12, 15480.9], [1.54407474E12, 47561.6], [1.54407486E12, 48947.7], [1.54407468E12, 7297.9], [1.5440748E12, 47711.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54407492E12, 2703.75], [1.54407474E12, 8306.666666666666], [1.54407486E12, 8548.75], [1.54407468E12, 1274.5833333333333], [1.5440748E12, 8332.916666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407492E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6495.72082379863, "minX": 1.54407468E12, "maxY": 42352.9534476724, "series": [{"data": [[1.54407492E12, 31135.715210355953], [1.54407474E12, 30894.74122191006], [1.54407486E12, 40988.59263050152], [1.54407468E12, 6495.72082379863], [1.5440748E12, 42352.9534476724]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407492E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6487.917620137303, "minX": 1.54407468E12, "maxY": 42324.29541477065, "series": [{"data": [[1.54407492E12, 31117.500539374298], [1.54407474E12, 30864.949789325845], [1.54407486E12, 40964.13374274986], [1.54407468E12, 6487.917620137303], [1.5440748E12, 42324.29541477065]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407492E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1774.3707093821506, "minX": 1.54407468E12, "maxY": 28100.12487205733, "series": [{"data": [[1.54407492E12, 21745.518878101422], [1.54407474E12, 18586.148174157326], [1.54407486E12, 28100.12487205733], [1.54407468E12, 1774.3707093821506], [1.5440748E12, 27501.348967448346]], "isOverall": false, "label": "GET Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407492E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 242.0, "minX": 1.54407468E12, "maxY": 48881.0, "series": [{"data": [[1.54407492E12, 38730.0], [1.54407474E12, 45900.0], [1.54407486E12, 47812.0], [1.54407468E12, 12156.0], [1.5440748E12, 48881.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54407492E12, 22978.0], [1.54407474E12, 10136.0], [1.54407486E12, 22956.0], [1.54407468E12, 242.0], [1.5440748E12, 27986.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54407492E12, 43293.0], [1.54407474E12, 41683.8], [1.54407486E12, 43377.6], [1.54407468E12, 9362.8], [1.5440748E12, 43448.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54407492E12, 45095.979999999996], [1.54407474E12, 43172.119999999995], [1.54407486E12, 45205.56], [1.54407468E12, 11185.300000000001], [1.5440748E12, 45234.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54407492E12, 43860.0], [1.54407474E12, 42102.7], [1.54407486E12, 43942.2], [1.54407468E12, 9945.599999999997], [1.5440748E12, 44028.49999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407492E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 40769.0, "minX": 1000.0, "maxY": 42370.0, "series": [{"data": [[5000.0, 41979.0], [3000.0, 41593.0], [6000.0, 41514.0], [1000.0, 40769.0], [2000.0, 41574.0], [4000.0, 41883.5], [8000.0, 42370.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 8000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 40753.0, "minX": 1000.0, "maxY": 42369.5, "series": [{"data": [[5000.0, 41925.0], [3000.0, 41572.0], [6000.0, 41487.0], [1000.0, 40753.0], [2000.0, 41550.5], [4000.0, 41875.5], [8000.0, 42369.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 8000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.283333333333335, "minX": 1.54407468E12, "maxY": 50.8, "series": [{"data": [[1.54407474E12, 50.8], [1.54407486E12, 31.283333333333335], [1.54407468E12, 37.28333333333333], [1.5440748E12, 47.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.283333333333333, "minX": 1.54407468E12, "maxY": 48.85, "series": [{"data": [[1.54407492E12, 15.45], [1.54407474E12, 47.46666666666667], [1.54407486E12, 48.85], [1.54407468E12, 7.283333333333333], [1.5440748E12, 47.61666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54407492E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.283333333333333, "minX": 1.54407468E12, "maxY": 48.85, "series": [{"data": [[1.54407492E12, 15.45], [1.54407474E12, 47.46666666666667], [1.54407486E12, 48.85], [1.54407468E12, 7.283333333333333], [1.5440748E12, 47.61666666666667]], "isOverall": false, "label": "GET Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407492E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.283333333333333, "minX": 1.54407468E12, "maxY": 48.85, "series": [{"data": [[1.54407492E12, 15.45], [1.54407474E12, 47.46666666666667], [1.54407486E12, 48.85], [1.54407468E12, 7.283333333333333], [1.5440748E12, 47.61666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54407492E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

